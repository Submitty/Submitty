{#
    Combo box for choosing an existing gradeable as a template for the new one
        (Only show this option if we aren't in edit mode).
#}
{% if action == 'new' or action == 'template' %}
    <div>
    {# temporarily remove the template feature because it is stale / needs refactoring.
        <div class="option row">
            <div class="option-desc col-md-6">
                <label for="gradeable_template">
                    <div class="option-title">Template</div>
                    <div class="option-alt">Select from one of the templates</div>
                </label>
            </div>
            <div class="option-input col-md-6">
                <select name="gradeable_template" id="gradeable_template" style='margin-right:30px'>
                <option>--None--</option>
                {% for template in template_list %}
                <option {{ action != 'new' and gradeable.getId() == template.g_id ? 'selected' : '' }}
                    value="{{ template.g_id }}">{{ template.g_title }}</option>
                {% endfor %}
                </select>
            </div>
        </div>
    #}
    </div>

{% endif %}

{#
    Primary Form
#}
<!-- Gradeable Title (read/write in all modes) -->
<div class="option row">
    <div class="option-desc col-md-6">
        <label for="g_title">
            <span class="option-title">Title</span>
            <br>
            <span class="option-alt">What is the title of this gradable?</span>
            <br>
            <span class="required_type">(Required)</span>
        </label>
    </div>

    <div class="option-input col-md-6">
        <input type='text' name='title' id='g_title' class="required auto_save new-gradeable" style="overflow:hidden" placeholder="(Required)" required value="{{ action != 'new' ? gradeable.getTitle() : '' }}" />
    </div>
</div>


<!-- Instruction URL (read/write in all modes) -->
<div class="option row">
    <div class="option-desc col-md-6">
        <label for="instructions_url">
            <span class="option-title">Assignment URL</span>
            <br>
            <span class="option-alt">What is the URL to the assignment instructions? (shown to student)</span>
        </label>
    </div>
    <div class="option-input col-md-6">
        <input type='text' name='instructions_url' id='instructions_url' class="auto_save new-gradeable"
        value="{{ action != 'new' ? gradeable.getInstructionsUrl() : '' }}" placeholder="(Optional)" />
    </div>
</div>


<!-- Gradeable ID (readonly in edit mode, required) -->
<div class="option row">
    <div class="option-desc col-md-6">
        <label for="g_id">
            <span class="option-title">Unique ID</span>
            <br>
            <span class="option-alt">What is the unique id of this gradeable? (e.g., <kbd>hw01</kbd>, <kbd>lab_12</kbd>, or <kbd>midterm</kbd>)</span>
        </label>
    </div>
    <div class="option-input col-md-6">
        <input type='text' name='id' id="g_id" class="required new-gradeable"
        value="{{ action != 'new' ? gradeable.getId() : '' }}" placeholder="(Required)"
        {{ action == 'edit' ? 'readonly' : 'required' }} />
    </div>
</div>

<div class="option">
    <div class="option-desc col-md-12">
        {% if action == 'new' or action == 'template' %}
            <!-- Gradeable Type radio buttons (readonly in edit mode) -->
            {# (VPAT) fieldset/legend required for gradeable type container radio group #}
            <fieldset><legend><span class="option-title">Gradeable Type</span></legend>
            <div class="option-alt"><a target=_blank href="http://submitty.org/instructor/create_edit_gradeable#types-of-gradeables">What is the type of the gradeable <i style="font-style:normal;" class="fa-question-circle"></i></a></div>
            <span class="required_type" >(Required)</span>
        {% else %}
            <fieldset><legend><b style='font-size:18px'>Gradeable type</b>: <span id="gradeable-type-string" data-hw="{{ gradeable_type_strings['electronic_hw'] | e('html_attr') }}" data-bulk="{{ gradeable_type_strings['electronic_bulk'] | e('html_attr') }}">{{ type_string }}</span></legend>
            <br />
        {% endif %}
        <div id="gradeable_type_container" {{ action == 'edit' ? 'hidden' : '' }}>
            <div>
                <input type='radio' id="radio_checkpoints" name="type" value="Checkpoints"
                    {{ action != 'new' and gradeable.getType() == 1 ? 'checked' : '' }}> <label for="radio_checkpoints"> {{ gradeable_type_strings['checkpoint'] }} </label>
            </div>

            <div>
                <input type='radio' id="radio_numeric" name="type" value="Numeric"
                    {{ action != 'new' and gradeable.getType() == 2 ? 'checked' : '' }}> <label for="radio_numeric"> {{ gradeable_type_strings['numeric'] }} </label>
            </div>

            <div hidden>
                <input type='radio' id="radio_electronic_file" name="type" value="Electronic File"
                        {{ action != 'new' and gradeable.getType() == 0 ? 'checked' : '' }}>  <label for="radio_electronic_file"> Electronic File (multiple types) </label>
            </div>

            {# Real input fields to back the exposed configurations options #}
            <div hidden>
                <input id="bulk_upload" name="bulk_upload" value="{{ action != 'new' and gradeable.isBulkUpload() ? 'true' : 'false' }}" aria-label="bulk upload">
                <input id="vcs" name="vcs" value="{{ action != 'new' and gradeable.isVcs() ? 'true' : 'false' }}" aria-label="vcs">
            </div>

            <div>
                <input class="ignore" type="radio" id="radio_ef_student_upload" name="electronic_gradeable_presets" value="normal"
                        {{ action != 'new' and not gradeable.isBulkUpload() and not gradeable.isVcs() ? 'checked' : ''}}> <label for="radio_ef_student_upload"> {{ gradeable_type_strings['electronic_hw'] }} </label>
            </div>

            <div>
                <input class="ignore" type="radio" id="radio_ef_vcs_upload" name="electronic_gradeable_presets" value="vcs"
                        {{ action != 'new' and not gradeable.isBulkUpload() and gradeable.isVcs() ? 'checked' : ''}}> <label for="radio_ef_vcs_upload"> {{ gradeable_type_strings['electronic_hw_vcs'] }} </label>
            </div>

            <div>
                <input class="ignore" type="radio" id="radio_ef_bulk_upload" name="electronic_gradeable_presets" value="bulk_upload"
                        {{ action != 'new' and gradeable.isBulkUpload() ? 'checked' : '' }}> <label for="radio_ef_bulk_upload"> {{ gradeable_type_strings['electronic_bulk'] }} </label>
            </div>
        </div>
        {# (VPAT) Closes fieldset that was opened for the gradeable type container radio group #}
        </fieldset>

      <!-- This is only relevant to Electronic Files -->
        <div class="gradeable_type_options electronic_file" id="electronic_file">
            <fieldset>
                <legend>Will any or all of this assignment be manually graded (e.g., by the TAs or the instructor)?</legend>
                <input type="radio" id="yes_ta_grade" name="ta_grading" value="true" class="bool_val auto_save date-related"
                        {{ action != 'new' and gradeable.getTaGrading() ? 'checked' : '' }} /> <label for="yes_ta_grade">Yes</label>
                <input type="radio" id="no_ta_grade" name="ta_grading" value="false" class="bool_val auto_save date-related"
                        {{ not (action != 'new' and gradeable.getTaGrading()) ? 'checked' : '' }} /> <label for="no_ta_grade">No</label>
            </fieldset>

            <fieldset id="grade_inquiry_enable_container">
                <legend>Should grade inquiries be enabled for this assignment?</legend>
                <input type="radio" id="yes_grade_inquiry_allowed" name="grade_inquiry_allowed" value="true" class="bool_val auto_save date-related"
                        {{ action != 'new' and gradeable.isGradeInquiryAllowed() ? 'checked' : '' }} /> <label for="yes_grade_inquiry_allowed">Yes</label>
                <input type="radio" id="no_grade_inquiry_allowed" name="grade_inquiry_allowed" value="false" class="bool_val auto_save date-related"
                        {{ not (action != 'new' and gradeable.isGradeInquiryAllowed()) ? 'checked' : '' }} /> <label for= "no_grade_inquiry_allowed">No</label>
            </fieldset>

            <fieldset class="grade_inquiry_per_component_allowed" id="gi_component_enable_container">
                <legend>Should grade inquiries be associated with a specific component of the rubric?</legend>
                <input type="radio" id="yes_grade_inquiry_per_component_allowed" name="grade_inquiry_per_component_allowed" value="true" class="bool_val auto_save"
                        {{ action != 'new' and gradeable is not null and gradeable.isGradeInquiryPerComponentAllowed() ? 'checked' : '' }} /> <label for="yes_grade_inquiry_per_component_allowed">Yes</label>
                <input type="radio" id="no_grade_inquiry_per_component_allowed" name="grade_inquiry_per_component_allowed" value="false" class="bool_val auto_save"
                        {{ not (action != 'new' and gradeable is not null and gradeable.isGradeInquiryPerComponentAllowed()) ? 'checked' : '' }} /> <label for= "no_grade_inquiry_per_component_allowed">No</label>
            </fieldset>

            {% if forum_enabled %}
                <div>
                    <fieldset id="discussion_grading_enable_container">
                        <legend>Is there a discussion component for this assignment?</legend>
                        <input type="radio" id="yes_discussion" name="discussion_based" value="true" class="bool_val auto_save date-related"
                                {{ action != 'new' and gradeable.isDiscussionBased() ? 'checked' : '' }} /> <label for="yes_discussion">Yes</label>
                        <input type="radio" id="no_discussion" name="discussion_based" value="false" class="bool_val auto_save date-related"
                                {{ not (action != 'new' and gradeable.isDiscussionBased()) ? 'checked' : '' }} /> <label for="no_discussion">No</label>

                        <div class="discussion_id_wrapper">
                        <label for="discussion_thread_id">What thread id(s) should be included? (separate by commas)</label>
                            <input style="width: 85px" name="discussion_thread_id" id="discussion_thread_id" class="int_val auto_save" type="text"
                                   value="{{ action != 'new' ? gradeable.getStringThreadIds() : '' }}" placeholder="(Required)"/>
                        </div>
                    </fieldset>
                </div>
            {% endif %}

            <div id="team-settings-container">
                {% if action == 'new' or action == 'template' %}
                    {# (VPAT) fieldset/legend needed for team assignment radio group #}
                    <fieldset><legend>Is this a team assignment?</legend>
                {% else %}
                    <fieldset><legend>Team Settings:
                    {{ gradeable.isTeamAssignment() ? '' : ' This is an individual assignment' }}</legend>
                {% endif %}
                <div style="{{ action == 'edit' ? 'display:none' : '' }}">
                    <input type="radio" id = "team_yes_radio" name="team_assignment" value="true"
                            {{ action != 'new' and gradeable.isTeamAssignment() ? 'checked' : '' }}> <label for="team_yes_radio">Yes</label>

                    <input type="radio" id = "team_no_radio" name="team_assignment" value ="false"
                            {{ not (action != 'new' and gradeable.isTeamAssignment()) ? 'checked' :  '' }}> <label for="team_no_radio">No</label>
                </div>
                {# (VPAT) Closes fieldset for team assignment radio group #}
                </fieldset>
            </div>

            <!-- Team settings (read only in edit mode) -->
            <div class="team_assignment team_yes" id="team_yes">

                <label for="team_size_max">What is the maximum team size?</label>
                    <input style="width: 50px" name="team_size_max" id="team_size_max" class="int_val auto_save new-gradeable" type="text"
                           value="{{ action != 'new' ? gradeable.getTeamSizeMax() : '3' }}"/>

                {#Use teams from a previous gradeable:
                <!-- Inherit teams from another gradeable? -->
                <br />
                    <!--Use a combo box if we can edit the value, otherwise show a text box (readonly)-->
                {% if action == 'new' %}
                    <select id='gradeable_teams' name="eg_inherit_teams_from" style='width: 170px;'
                        value='{{ admin_gradeable.getEgInheritTeamsFrom() }}'>
                        <option value=''>--None--</option>
                        {% for parent in inherit_teams_list %}
                            <option {{ admin_gradeable.getEgInheritTeamsFrom() == parent.g_id ? 'selected' : '' }}
                                value="{{ parent.g_id }}">{{ parent.g_title }}</option>
                        {% endfor %}
                    </select>
                {% else %}
                    <input id='gradeable_teams_read' name='gradeable_teams_read' style='width=170px'
                        value='{{ admin_gradeable.getEgInheritTeamsFrom() }}' readonly/>
                {% endif %}
                #}
            </div>

            <div id="repository">
                <fieldset>
                    <legend><a target=_blank href="https://submitty.org/instructor/assignment_preparation/submission_version_control">VCS Repository Details (select one) <i style="font-style:normal;" class="fa-question-circle"></i></a></legend>
                    <div>
                        <input type='radio' id="vcs_radio_submitty_hosted" name="vcs_radio_buttons" value="submitty-hosted"
                            {{ action == 'new' or (action != 'new' and gradeable.getVcsHostType() == 0) ? 'checked' : '' }}
                            {{ action != 'new' and action != 'template' ? 'disabled' : '' }}> <label for="vcs_radio_submitty_hosted">Submitty hosted & created – single gradeable repository</label>
                        <div id="vcs_submitty_url_content" style="margin-left: 5%">
                            <kbd>{{ vcs_base_url }}&#123;&#36;gradeable_id&#125;&#47;</kbd>
                            <kbd class="team_no">&#123;&#36;user_id&#125;</kbd>
                            <kbd class="team_yes">&#123;&#36;team_id&#125;</kbd>
                        </div>
                    </div>
                    <div class="team_no">
                        <input type='radio' id="vcs_radio_submitty_hosted_set_url" name="vcs_radio_buttons" value="submitty-hosted-url"
                            {{ action != 'new' and gradeable.getVcsHostType() == 1 ? 'checked' : '' }}
                            {{ action != 'new' and action != 'template' ? 'disabled' : '' }}> <label for="vcs_radio_submitty_hosted_set_url">Submitty hosted & created – choose repository name (can be used for multiple gradeables)</label>

                        <div id="vcs_submitty_set_url_content" style="margin-left: 5%">
                            {% if action == 'new' or action == 'template' %}
                                <kbd>{{ vcs_base_url }}</kbd>
                                <input style='width: 30%' type='text' name="vcs_path" id="vcs_path" class="required auto_save new-gradeable" placeholder="(Required)"
                                    aria-label="repository name" value="" required />
                                <kbd>&#47;&#123;&#36;user_id&#125;</kbd>
                            {% else %}
                                <kbd>{{ vcs_base_url }}{{ gradeable.getVcsPartialPath() }}</kbd>
                            {% endif %}
                        </div>
                    </div>

                    <input type='radio' id="vcs_radio_public_github" name="vcs_radio_buttons" value="public-github"
                        {{ action != 'new' and gradeable.getVcsHostType() == 2 ? 'checked' : '' }}
                        {{ action != 'new' and action != 'template' ? 'disabled' : '' }}> <label for="vcs_radio_public_github">Externally hosted - public repository, students will provide URL</label> <br />

                    <input type='radio' id="vcs_radio_private_github" name="vcs_radio_buttons" value="private-github"
                        {{ action != 'new' and gradeable.getVcsHostType() == 3 ? 'checked' : '' }}
                        {{ action != 'new' and action != 'template' ? 'disabled' : '' }}> <label for="vcs_radio_private_github">Externally hosted - private repository, students will provide URL (NOTE: access/permissions implementation incomplete -- DO NOT USE)</label>
                
                    <div class="team_no">
                        <input type='radio' id="vcs_radio_self_hosted_set_url" name="vcs_radio_buttons" value="self-hosted"
                            {{ action != 'new' and gradeable.getVcsHostType() == 4 ? 'checked' : '' }}
                            {{ action != 'new' and action != 'template' ? 'disabled' : '' }}> <label for="vcs_radio_self_hosted_set_url">Externally hosted - private repository, instructor set URL, instructor or sysadmin must create repository</label>

                        <div id="vcs_self_set_url_content" style="margin-left: 5%">
                            {% if action == 'new' or action == 'template' %}
                                <label for="external_repo">What is the URL to the repository? </label>
                            <input style='width: 80%' type='text' name="external_repo" id="external_repo" class="required auto_save new-gradeable"
                                    aria-label="repository name" value="{{ vcs_partial_path == '' ? vcs_base_url : vcs_partial_path }}" required/><br />
                            {% else %}
                                <kbd id="vcs_url">{{ vcs_partial_path }}</kbd>
                            {% endif %}  
                        </div>	     					    
                    </div>

                </fieldset>

                <div id="subdirectory-settings-container" class="subdirectory">
                        {# (VPAT) fieldset/legend needed for subdirectory radio group #}
                    <div>
                        <fieldset><legend>Are the student's files for this gradeable expected to 
                        be in a specific subdirectory of their VCS repository?</legend>
                        
                            <input type="radio" id="subdir_yes_radio" name="using_subdirectory" value="true" class="bool_val auto_save" 
                                    {{ action != 'new' and using_subdirectory ? 'checked' : '' }}/> <label for="subdir_yes_radio">Yes</label>
                            <input type="radio" id="subdir_no_radio" name="using_subdirectory" value="false" class="bool_val auto_save" 
                                    {{ action == 'new' or (action == 'edit' and  not using_subdirectory) ? 'checked' :  '' }} /> <label for="subdir_no_radio">No</label>
                        {# (VPAT) Closes fieldset for subdirectory radio group #}
                        </fieldset>    
                    </div>
                    
                </div>

                <div class="subdirectory_yes" id="subdir_yes">
                    {% if action == 'new' or action == 'template' %}
                    What is the path to students files within the VCS repository:
                    {% else %}
                    Path to students files within the VCS repository:
                    {% endif %}
                    <input style='width: 30%' type='text' name="vcs_subdirectory" id="vcs_subdirectory_input" class="required auto_save new-gradeable" placeholder="(Required)"
                                        aria-label="repository name" value="{{ vcs_subdirectory }}" required/><br />
                    <em>Note: all other files & directories in the repository will be discarded from the checkout before grading begins.</em></label>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Gradeable bucket (read/write in all modes) -->
<div class="option row">
    <div class="option-desc col-md-6">
        <label for="syllabus_bucket">
            <span class="option-title">Syllabus Category</span>
            <br>
            <span class="option-alt"><a target=_blank href="https://submitty.org/instructor/course_settings/rainbow_grades/gradeables">What syllabus category does this item belong to? <i style="font-style:normal;" class="fa-question-circle"></i></a></span>
        </label>
    </div>

    <div class="option-input col-md-6">
        <select name="syllabus_bucket" id="syllabus_bucket" class="auto_save">
        {% for bucket in syllabus_buckets %}
        <option value="{{ bucket }}" {{ action != 'new' and gradeable.getSyllabusBucket() == bucket ? 'selected' : '' }}>
            {{ bucket | title }}
        </option>
        {% endfor %}
        </select>
    </div>
</div>

{% if action == 'new' or action == 'template' %}
<div class="option row">
    <div class="option-desc col-md-12">
        <em>Note: After pressing the "Create New Gradeable" button you may not change:</em>
        <ul style="margin-left:10px">
            <li style="margin-left:15px"><em>The unique id</em></li>
            <li style="margin-left:15px"><em>Gradeable type (electronic file upload, checkpoints, or text)</em></li>
            <li style="margin-left:15px"><em>Whether the students will submit as individuals or team</em></li>
            <li style="margin-left:15px"><em>Whether the students will submit by directly uploading files or by version control</em></li>
        </ul>
        <em>All other settings for this gradeable may be edited.</em>
    </div>
</div>
<div class="row">
    <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
    <button class="btn btn-primary" type="submit" id="create-gradeable-btn" disabled style="margin-left:10px;">Create New Gradeable</button>
</div>
{% endif %}


<div id="alert-message" title="WARNING">
    <p>Gradeable ID must not be blank and only contain characters <strong> a-z A-Z 0-9 _ - </strong> </p>
</div>

<script>


    /* Increasing Height of textarea*/
    function textAreaAdjust(o) {
        o.style.height = "1px"
        o.style.height = (15+o.scrollHeight)+"px";
    }


    function updateDateDisplay() {
        let elecDateBoxes = $('.electronic_file_dates input');
        elecDateBoxes.prop('disabled', true);
        if ($('#radio_electronic_file').is(':checked')) {
            elecDateBoxes.prop('disabled', false);
            $('.manual_grading_dates input').prop('disabled', $('#no_ta_grade').is(':checked'));
            $('#date_team_lock').prop('disabled', {{ gradeable is not null and gradeable.isTeamAssignment() ? 'false' : 'true' }});
            $('#late_days').prop('disabled', $('#no_late_submission').is(':checked'));

            {# Use this 'each' trick since 'no_grade_inquiry_allowed' may not be defined if grade inquiries are not enabled #}
            const [gradeInqOpenDate, gradeInqDueDate] = [$('#date_grade_inquiry_start'), $('#date_grade_inquiry_due')];

            gradeInqOpenDate.prop('disabled', true);
            gradeInqDueDate.prop('disabled', true);
            $('#no_grade_inquiry_allowed').each(function () {
                gradeInqOpenDate.prop('disabled', $(this).is(':checked'));
                gradeInqDueDate.prop('disabled', $(this).is(':checked'));
            });

            $('#date_released').prop('disabled', !$('#has_release_date_yes').is(':checked'));

            const has_due_date = $('#has_due_date_yes').is(':checked');

            $('#date_due').prop('disabled', !has_due_date);


        }
        $('#hide_dates').hide();
        $('#show_all_dates').show();
    }

    //
    // Event Handlers
    //
    function onGradeableTypeChange() {
        // Hide red text once user selects an option
        if($('#radio_electronic_file').is(':checked') ||
           $('#radio_checkpoints').is(':checked') ||
           $('#radio_numeric').is(':checked')) {
               $('.required_type').hide();
        }

        if(!$('#radio_electronic_file').is(':checked')) {
            $('input[name=bulk_upload]').prop('checked', false);
        }

        disableElementChildren('.electronic_file');
        disableElementChildren('.checkpoints');
        disableElementChildren('.numeric');

        // Display the correct options for all forms depending
        //  on gradeable type
        if($('#radio_electronic_file').is(':checked')) {
            disableElementChildren('.electronic_file', false);
            $('#page_1_nav').show();
            onManualGradingChange();
            if ($('input[name=electronic_gradeable_presets]:checked').length === 0) {
                $('input[name=electronic_gradeable_presets][value=normal]').prop('checked', true);
            }
        }
        else {
            $('input[name=electronic_gradeable_presets]').prop('checked', false);
            if ($('#radio_checkpoints').is(':checked')) {
                disableElementChildren('.checkpoints', false);
            }
            else if ($('#radio_numeric').is(':checked')) {
                disableElementChildren('.numeric', false);
            }
        }
    }

    function onTeamAssignmentChange() {
        if($('#team_yes_radio').is(':checked')) {
            // $('.team_yes').show();
            disableElementChildren('.team_yes', false);
            disableElementChildren('.team_no', true);

            // If Set-URL is checked but then teams are disabled
            //  set This-Gradeable as checked instead
            if($('#vcs_radio_submitty_hosted_set_url').is(':checked')) {
                $('#vcs_radio_submitty_hosted').prop('checked', true);
                onVCSTypeChange();
            }
        }
        else {
            // $('.team_yes').hide();
            disableElementChildren('.team_yes', true);
            disableElementChildren('.team_no', false);
        }
    }

    function onSubdirectoryChange() {
        if($('#subdir_yes_radio').is(':checked')) {
            disableElementChildren('.subdirectory_yes', false);
            $('#vcs_subdirectory_input').prop('required', true);
        }
        else {
            disableElementChildren('.subdirectory_yes', true);
            $('#vcs_subdirectory_input').prop('required', false);
        }
    }

    function onDiscussionChange() {
        if($('#yes_discussion').is(':checked')) {
            disableElementChildren('.discussion_id_wrapper', false);
            $("#discussion_thread_id").attr('required', '');
        }
        else {
            disableElementChildren('.discussion_id_wrapper', true);
            $("#discussion_thread_id").removeAttr('required');
        }
    }

    function onManualGradingChange() {
        if($('#yes_ta_grade').is(':checked') || !$('#radio_electronic_file').is(':checked')) {
            // $('.manual_grading').show();
            disableElementChildren('.manual_grading', false);
            disableElementChildren('.no_manual_grading', true);
            $('#grade_inquiry_enable_container').show();
            $('#discussion_grading_enable_container').show();
        }
        else {
            // $('.manual_grading').hide();
            disableElementChildren('.manual_grading', true);
            disableElementChildren('.no_manual_grading', false);
            $("#yes_discussion").prop('checked', false);
            $("#no_discussion").prop('checked', true);
            $('#grade_inquiry_enable_container').hide();
            $('#discussion_grading_enable_container').hide();
            {% if forum_enabled %}
            document.getElementById("no_discussion").checked = true;
            {% endif %}
        }
        updateDateDisplay();
    }

    function onVCSTypeChange() {
        disableElementChildren('[id=vcs_submitty_set_url_content]', true);
        disableElementChildren('[id=vcs_submitty_url_content]', true);
        disableElementChildren('[id=vcs_self_set_url_content]', true);

        if($('#vcs_radio_submitty_hosted').is(':checked')) {
            disableElementChildren('#vcs_submitty_url_content', false);
        }

        if($('#vcs_radio_submitty_hosted_set_url').is(':checked')) {
            disableElementChildren('#vcs_submitty_set_url_content', false);
            $('#vcs_path').prop('required', true);
        }
        else {
            $('#vcs_path').prop('required', false);
        }
        
        if($('#vcs_radio_self_hosted_set_url').is(':checked')) {
            disableElementChildren('#vcs_self_set_url_content', false);
            $('#vcs_self_url').prop('required', true);
        }
        else {
            $('#vcs_self_url').prop('required', false);
        }
    }

    function onIsGradeInquiryAllowedChange() {
        if ($('#yes_grade_inquiry_allowed').is(':checked')) {
            disableElementChildren('.grade_inquiry_date', false);
            disableElementChildren('.grade_inquiry_per_component_allowed', false);
        }
        else {
            disableElementChildren('.grade_inquiry_date', true);
            $('#no_grade_inquiry_per_component_allowed').prop('checked',true);
            disableElementChildren('.grade_inquiry_per_component_allowed', true);
        }
        updateDateDisplay();
    }

    function onLateSubmissionAllowedChanged() {
        let lateSubmissionParts = $('.yes-late-submission');
        if($('#yes_late_submission').is(':checked')) {
            lateSubmissionParts.show();
        }
        else {
            lateSubmissionParts.hide();
        }
        updateDateDisplay();
    }

    function onHasReleaseDate() {
        if ($('#has_release_date_yes').is(':checked')) {
            disableElementChildren('.release_date_date', false);
        }
        else {
            disableElementChildren('.release_date_date', true);
        }
        updateDateDisplay();
    }

    function onHasDueDate() {
        if ($('#has_due_date_yes').is(':checked')) {
            disableElementChildren('.due_date_date', false);
        }
        else {
            disableElementChildren('.due_date_date', true);
        }
        updateDateDisplay();
    }

    $(function () {
        $("#alert-message").dialog({
            modal: true,
            autoOpen: false,
            buttons: {
                Ok: function () {
                    $(this).dialog("close");
                }
            }
        });
    });

    $(document).ready(function() {

        onManualGradingChange();
        $('[name="ta_grading"]').change(onManualGradingChange);
        $('[name="ta_grading"]').change(onDiscussionChange);

        //
        // Template Selector Box Events
        //

        // Event handler for the gradeable template selection change
        $('[name="gradeable_template"]').change(
        function() {
            // Redirect user to the same page, but in the process,
            //  fetch the data from the template gradeable
            window.location.href = buildCourseUrl(['gradeable']) + `?template_id=${this.value}`;
        });

        //
        // Gradeable Type Radio Button Events
        //
        
        $("input[type='radio']").change(validate);
        
        function validate() {
            const sub1 = $('input[type]');
            const sub2 = $('input[electronic_gradeable_presets]');
           
            if ( $(sub1).is(':checked') || $(sub2).is(':checked')) {
                $(".btn#create-gradeable-btn").removeAttr("disabled", false);
            } 
            else {
                $(".btn#create-gradeable-btn").attr("disabled", true);
            }
        }

        // Hide team settings if it isn't a electronic gradeable
        onGradeableTypeChange();
        $('[name="type"]').change(onGradeableTypeChange);

        // Hide team settings if team's are not the selected option
        onTeamAssignmentChange();
        $('[name="team_assignment"]').change(onTeamAssignmentChange);

        // Hide the subdirectory field if not selected
        onSubdirectoryChange();
        $('[name="using_subdirectory"]').change(onSubdirectoryChange);

        // Hide VCS settings depending on different radio buttons
        onVCSTypeChange();
        $('[name="vcs_radio_buttons"]').change(onVCSTypeChange);

        onDiscussionChange();
        $('[name="discussion_based"]').change(onDiscussionChange);

        disableElementChildren('#repository', $('input[name=vcs]').val() === 'false');
        disableElementChildren('#subdirectory-settings-container', $('input[name=vcs]').val() === 'false');

        // Update the electronic file subtype
        $('input[name=electronic_gradeable_presets]').change(function() {
            $('#radio_electronic_file').prop('checked', true);
            onGradeableTypeChange();
            const vcs = $('input[name=vcs]');
            const bulkUpload = $('input[name=bulk_upload]');

            vcs.val('false');
            $('#repository').hide();
            $('#subdirectory-settings-container').hide();
            if ($(this).val() === 'bulk_upload') {
                bulkUpload.val('true');
            }
            else {
                bulkUpload.val('false');
                if ($(this).val() === 'vcs') {
                    vcs.val('true');
                    $('#repository').show();
                    $('#subdirectory-settings-container').show();
                }
                else {
                }
            }
            vcs.change();
            bulkUpload.change();
        });

        //Hide Grade Inquiry Date if Grade Inquiries are not enabled
        onIsGradeInquiryAllowedChange();
        $('[name="grade_inquiry_allowed"]').change(onIsGradeInquiryAllowedChange);
        $('[name="grade_inquiry_per_component_allowed"]').click(function() {
            if ($('#no_grade_inquiry_per_component_allowed').prop('checked') && !confirm('* WARNING *\nThere are already grade inquiries, continuing with this action will permanently convert all component inquiries to general inquiries.  Do you want to proceed?')) {
                return false;
            }
        });

        onLateSubmissionAllowedChanged();
        $('input[name=late_submission_allowed]').change(onLateSubmissionAllowedChanged);
    });

    function checkForm() {
        var gradeable_id = $('#g_id').val();
        var gradeable_title = $('#g_title').val();
        var has_space = gradeable_id.includes(" ");
        var test = /^[a-zA-Z0-9_-]*$/.test(gradeable_id);

        var check1 = $('#radio_electronic_file').is(':checked');
        var check2 = $('#radio_checkpoints').is(':checked');
        var check3 = $('#radio_numeric').is(':checked');


        {% if action != 'edit' %}
            var all_gradeable_ids = {{ template_list|json_encode|raw }};
            if(all_gradeable_ids.find(element => element.g_id === gradeable_id)) {
                alert("Gradeable already exists");
                return false;
            }
        {% endif %}
        if (!test || has_space || gradeable_id == "" || gradeable_id === null) {
            $( "#alert-message" ).dialog( "open" );
            return false;
        }

        if (gradeable_title == '' || gradeable_title === null) {
            alert("A name for the gradeable must be assigned");
            return false;
        }

        if(!check1 && !check2 && !check3) {
            alert("A type of gradeable must be selected");
            return false;
        }

        return true;
    }

</script>
{% include('admin/admin_gradeable/AdminGradeableUploadForm.twig') %}
