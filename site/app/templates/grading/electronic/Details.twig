<div class="content">
    {#
        Default is viewing your sections
        Limited grader does not have "View All" option
        If nothing to grade, Instructor will see all sections
    #}
    <div class="row details-header-row">
    <h1>Grade Details for {{ gradeable.getTitle() }}</h1>
        <div class="markers-container">
            <ul id="details-legend">
                <li>
                    <i class="fas fa-circle grader-NULL"></i>
                    Ungraded component
                </li>
                <li>
                    <i class="fas fa-circle grader-3"></i>
                    Component graded by a limited access grader
                </li>
                <li>
                    <i class="fas fa-circle grader-4"></i>
                    Peer component graded by a student
                </li>
                <li>
                    <i class="fas fa-circle grader-1"></i>
                    Component graded by a full access grader
                </li>
                <li>
                    <i class="fas fa-circle grader-verified"></i>
                    Limited access grader verified
                </li>
                <li>
                    <i class="fas fa-circle grader-double"></i>
                    Component double-graded by a full access grader or instructor
                </li>
            </ul>

            <div class="action-btn-cont">
                {% if show_all_sections_button %}
                <button class="btn btn-default" data-testid="view-sections" onclick="changeSections()">
                    {{ view_all ? "View Your Sections" : "View All" }}
                </button>
                {% endif %}
                <a class="btn btn-default"
                   href="" onclick="changeSortOrder()">
                    {{ sort == 'random' ? "Switch to Default Order" : "Switch to Random Order" }}
                </a>
                {% if toggle_anon_button %}
                <button class="btn btn-default" id="toggle-anon-button"
                    onclick="changeAnon('{{ gradeable.getId() }}')">
                    {{ anon_mode ? "Disable Anonymous Mode" : "Enable Anonymous Mode" }}
                </button>
                {% endif %}
                {% if grade_inquiry_only_button %}
                <button class="btn btn-default" id="inquiryButton" onclick="change_inquiry()">
                    {{ inquiry_status ? "Grade Inquiry Only: Off" : "Grade Inquiry Only: On" }}
                </button>
                {% endif %}
            </div>
        </div>
    </div>
    {% if grade_inquiry_only_button %}
        <script>
            inquiry_update();
        </script>
    {% endif %}
    {% if not is_student %}
        <a href="{{ stats_url }}" class="btn btn-primary">Grading Stats</a>
    {% endif %}
    {% if not is_instructor %}
        <button class="btn btn-default" onclick="showGradeableMessage()">Responsibilities as a Grader</button>
    {% endif %}
    {% if can_regrade %}
        <div class="btn-group">
            <button type="button" class="btn btn-primary regrade-btn" onclick="ajaxCountRegrade(0,event,confirmMessage);">Regrade Active Versions for All students</button>
            <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item regrade-btn-all" onclick="ajaxCountRegrade(1,event,confirmMessage);">Regrade All Versions for All students</a>
            </div>
        </div>
    {% endif %}
    <button type="button" class="btn btn-primary" onclick="collapseAllSections()">Collapse All Sections</button>
    <button type="button" class="btn btn-primary" onclick="expandAllSections()">Expand All Sections</button>
    {% if message is not empty %}
    <div class="details-warning-box{% if message_warning %} details-warning-highlight{% else %} details-warning-neutral{% endif %}">
        {{ message|nl2br }}
    </div>
    {% endif %}
    <div class="details-action-box">
        {# Import+Export teams buttons #}
        {% if show_import_teams_button %}
            <a class="btn btn-primary"
               href="{{ export_teams_url }}"
            >Export Teams Members</a>
        {% endif %}
        {% if show_export_teams_button %}
            <button class="btn btn-primary key_to_click"
                    tabindex="0"
                    onclick="importTeamForm();"
            >
                Import Teams Members
            </button>
        {% endif %}
        {# /Import+Export teams buttons #}

        {# Randomize team button #}
        {% if (not gradeable.isGradeByRegistration()) and (show_export_teams_button or show_import_teams_button) %}
            {% if past_grade_start_date %}
                <button class="btn btn-default key_to_click"
                        tabindex="0"
                        onclick="randomizeRotatingGroupsButton()"
                >
                    Randomly Re-Assign Teams to Rotating Sections
                </button>
            {% else %}
                <a class="btn btn-default"
                   href="{{ randomize_team_rotating_sections_url }}"
                    >
                    Randomly Re-Assign Teams to Rotating Sections
                </a>
            {% endif %}
        {% endif %}
    </div>

    {# This is a data table #}
    <table id="details-table" data-testid="details-table" class="table table-striped table-bordered persist-area table-text-left" data-details-base-path="{{ details_base_path }}">
        <caption />
        {# Table header #}
        <thead>
            <tr>
                {% for column in columns %}
                    {% if column.sort_type is defined %}
                        <th style="width:{{ column.width }}; text-align: center" data-col-title="{{ column.title }}">
                            <a href="#" onclick= "sortTableByColumn('{{ column.sort_type }}', '{{ sort == column.sort_type ? (direction == 'ASC' ? 'DESC' : 'ASC') : 'ASC' }}')"
                            {% if sort == column.sort_type %}
                                class="active-sort"
                            {% endif %}
                            >
                                {{ column.title }}
                                {% if sort == column.sort_type %}
                                    <i class="fa {{ direction == 'ASC' ? 'fa-sort-up' : 'fa-sort-down' }}"></i>
                                {% else %}
                                    <i class="fa fa-sort"></i>
                                {% endif %}
                            </a>
                        </th>
                    {% else %}
                        <th style="width:{{ column.width }}; text-align: center" data-col-title="{{ column.title }}">{{ column.title }}</th>
                    {% endif %}
                {% endfor %}
            </tr>
        </thead>
        {# /Table header #}
        {# Sections #}
        {% if sections|length == 0 %}
            <tbody class="empty-info-header">
                <tr class="info">
                    <td colspan="{{ columns|length }}" style="text-align: center"> No Grading To Be Done! :) </td>
                </tr>
            </tbody>
        {% else %}
            {% for section in sections %}
                {# Section heading #}
                <tbody class="details-info-header{% if section.title not in collapsed_sections %} panel-head-active{% endif %}" id="details-content-section-{{section.title}}" data-section-id="{{section.title}}">
                    <tr class="info">
                        {% if core.getUser().accessGrading() %}
                            <td colspan="{{ columns|length }}" style="text-align: center">
                                <i class="collapse-icon fas fa-caret-right"></i>
                                <i class="expand-icon fas fa-caret-down"></i>
                                {% if gradeable.isGradeByRegistration()%}
                                    Students Enrolled in Registration Section {{ section.title }}
                                {% else %}
                                    Students Assigned to Rotating Section {{ section.title }}
                                {% endif %}
                            </td>
                        {% endif %}
                    </tr>
                    <tr class="info">
                        <td colspan="{{ columns|length }}" style="text-align: center">Graders: {{ section.graders }}</td>
                    </tr>
                </tbody>
                {# /Section heading #}
                {# Student list #}
                <tbody class="details-content panel-content-active"{% if section.title in collapsed_sections %} style="display: none"{% endif %}>
                    {% if section.rows is defined %}
                        {% for info in section.rows %}
                            {{ _self.render_student(_context, section, info.graded_gradeable, loop.index, info, columns, team_gradeable_view_history, overrides, anon_ids, max_team_name_length) }}
                        {% endfor %}
                    {% endif %}
                    {% if section.teamless_users is defined %}
                        {% for info in section.teamless_users %}
                            {{ _self.render_teamless_user(_context, section, info.user, info.new_team_onclick, loop.index + (section.rows is defined ? section.rows|length : 0), columns) }}
                        {% endfor %}
                    {% endif %}
                </tbody>
                {# /Student list #}
            {% endfor %}
        {% endif %}
        {# /Sections #}
        {# Empty teams #}
        {% if gradeable.isTeamAssignment() and empty_teams|length > 0 %}
            <tbody class="details-info-header{% if 'empty-teams' not in collapsed_sections %} panel-head-active{% endif %}" id="details-content-section-empty-teams" data-section-id="empty-teams">
                <tr class="info">
                    {% if core.getUser().accessGrading() %}
                    <td colspan="{{ columns|length }}" style="text-align: center">
                        <i class="collapse-icon fas fa-caret-right"></i>
                        <i class="expand-icon fas fa-caret-down"></i>
                    </td>
                    {% endif %}
                </tr>
                <tr class="info">
                    <td colspan="{{ columns|length }}" style="text-align: center">Empty teams</td>
                </tr>
            </tbody>
            <tbody class="details-content panel-content-active">
                {% for team in empty_teams %}
                    {% set reg_section = team.getRegistrationSection() ?? "NULL" %}
                    {% set rot_section = team.getRotatingSection() ?? "NULL" %}
                    {% set display_section = gradeable.isGradeByRegistration() ? reg_section : rot_section %}
                    <tr id="empty-team-row-{{ team.getId() }}">
                        <td>
                            {{ loop.index }}
                        </td>
                        <td>
                            {{ display_section }}
                        </td>
                        <td>
                            <a onclick="{{ empty_team_info[loop.index0].team_edit_onclick }}" aria-label="Edit Team" class="key_to_click" tabindex="0">
                                <i class="fas fa-pencil-alt"></i>
                            </a>
                        </td>
                        <td>{{ team.getId() }}</td>
                        <td colspan="{{ columns|length - 4 }}"></td>
                    </tr>
                {% endfor %}
            </tbody>
        {% endif %}
        {# /Empty teams #}
    </table>
</div>

{% macro render_student(context, section, graded_gradeable, index, info, columns, team_gradeable_view_history, overrides, anon_ids, max_team_name_length) %}
    <tr class="grade-table" data-testid="grade-table"
        {% if not graded_gradeable.getSubmitter().isTeam() and graded_gradeable.getSubmitter().getUser().accessGrading() %}
            style='background: #7bd0f7;'
        {% endif %}
    >
        {% for column in context.columns %}
            {#
                This is basically a switch statement. It calls the function we need for
                the current column and that will give us the table cell.
            #}
            {% if column.function == "active_version" %}
                {{ _self.render_column_active_version(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "autograding" %}
                {{ _self.render_column_autograding(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "autograding_peer" %}
                {{ _self.render_column_autograding_peer(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "graded_questions" %}
                {{ _self.render_column_graded_questions(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "grading" %}
                {{ _self.render_column_grading(context, section, graded_gradeable, index, info, column, overrides, anon_ids) }}
            {% elseif column.function == "grading_blind" %}
                {{ _self.render_column_grading_blind(context, section, graded_gradeable, index, info, column, overrides, anon_ids) }}
            {% elseif column.function == "grading_blind" %}
                {{ _self.render_column_grading_peer(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "index" %}
                {{ _self.render_column_index(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "section" %}
                {{ _self.render_column_section(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "team_edit" %}
                {{ _self.render_column_team_edit(context, section, graded_gradeable, index, info.team_edit_onclick, column, info.edited_past_lock_date) }}
            {% elseif column.function == "team_id" %}
                {{ _self.render_column_team_id(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "team_id_anon" %}
                {{ _self.render_column_team_id_anon(context, section, graded_gradeable, index, info, column, anon_ids) }}
            {% elseif column.function == "team_name" %}
                {{ _self.render_column_team_name(context, section, graded_gradeable, index, info, column, max_team_name_length) }}
            {% elseif column.function == "team_members" %}
                {{ _self.render_column_team_members(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "total" %}
                {{ _self.render_column_total(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "user_given" %}
                {{ _self.render_column_user_given(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "user_id" %}
                {{ _self.render_column_user_id(context, section, graded_gradeable, index, info, column, anon_ids) }}
            {% elseif column.function == "user_id_anon" %}
                {{ _self.render_column_user_id_anon(context, section, graded_gradeable, index, info, column, anon_ids) }}
            {% elseif column.function == "team_members_anon" %}
                {{ _self.render_column_team_members_anon(context, section, graded_gradeable, index, info, column, anon_ids) }}
            {% elseif column.function == "user_family" %}
                {{ _self.render_column_user_family(context, section, graded_gradeable, index, info, column) }}
            {% elseif column.function == "viewed_grade" %}
                {{ _self.render_column_viewed_grade(context, section, graded_gradeable, index, info, column, team_gradeable_view_history) }}
            {% endif %}
        {% endfor %}
    </tr>
{% endmacro %}

{% macro render_teamless_user(context, section, user, new_team_onclick, index, columns, edited_past_lock_date) %}
    <tr>
        {% for column in columns %}
            {#
                This is basically a switch statement. It calls the function we need for
                the current column and that will give us the table cell.
            #}
            {% if column.function == "active_version" %}
                <td></td>
            {% elseif column.function == "autograding" %}
                <td></td>
            {% elseif column.function == "autograding_peer" %}
                <td></td>
            {% elseif column.function == "graded_questions" %}
                <td></td>
            {% elseif column.function == "grading" %}
                <td><b><i>No Team</i></b></td>
            {% elseif column.function == "grading_peer" %}
                <td></td>
            {% elseif column.function == "index" %}
                {{ _self.render_column_index(context, section, null, index, null, column) }}
            {% elseif column.function == "section" %}
                {{ _self.render_column_section(context, section, null, index, null, column) }}
            {% elseif column.function == "team_edit" %}
                {{ _self.render_column_team_edit(context, section, null, index, new_team_onclick, column, edited_past_lock_date) }}
            {% elseif column.function == "team_id" %}
                <td></td>
             {% elseif column.function == "team_id_anon" %}
                <td></td>
            {% elseif column.function == "team_name" %}
                <td></td>
            {% elseif column.function == "team_members" %}
                <td>
                    {{ user.getDisplayedGivenName() }}
                    {{ user.getDisplayedFamilyName() }}
                </td>
            {% elseif column.function == "team_members_anon" %}
                <td></td>
            {% elseif column.function == "total" %}
                <td></td>
            {% elseif column.function == "total_peer" %}
                <td></td>
            {% elseif column.function == "user_given" %}
                <td></td>
            {% elseif column.function == "user_id" %}
                <td></td>
            {% elseif column.function == "user_id_anon" %}
                <td></td>
            {% elseif column.function == "user_family" %}
                <td></td>
            {% elseif column.function == "viewed_grade" %}
                <td></td>
            {% endif %}
        {% endfor %}
    </tr>
{% endmacro %}

{# Column functions #}

{# Active Version #}
{% macro render_column_active_version(context, section, graded_gradeable, index, info, column) %}
    {% if graded_gradeable.getAutoGradedGradeable().getHighestVersion() == 0 %}
        <td></td>
    {% elseif graded_gradeable.getAutoGradedGradeable().getActiveVersion() == graded_gradeable.getAutoGradedGradeable().getHighestVersion() %}
        <td style="text-align: center;">{{ graded_gradeable.getAutoGradedGradeable().getActiveVersion() }}</td>
    {% else %}
        <td style="text-align: center;">{{ graded_gradeable.getAutoGradedGradeable().getActiveVersion() }} / {{ graded_gradeable.getAutoGradedGradeable().getHighestVersion() }}</td>
    {% endif %}
{% endmacro %}

{# Autograding #}
{% macro render_column_autograding(context, section, graded_gradeable, index, info, column) %}
    <td>
        {% if graded_gradeable.getAutoGradedGradeable().getHighestVersion() != 0 %}
            {% if graded_gradeable.getAutoGradedGradeable().getActiveVersion() != 0  %}
                {{ graded_gradeable.getAutoGradedGradeable().getTotalPoints() }} / {{ graded_gradeable.getGradeable().getAutogradingConfig().getTotalNonExtraCredit() }}
            {% endif %}
        {% endif %}
    </td>
{% endmacro %}

{# Autograding (peer) #}
{% macro render_column_autograding_peer(context, section, graded_gradeable, index, info, column) %}
    <td>
        {% if graded_gradeable.getAutoGradedGradeable().getHighestVersion() != 0 and graded_gradeable.getAutoGradedGradeable().getActiveVersionInstance() is not null %}
            {{ graded_gradeable.getAutoGradedGradeable().getActiveVersionInstance().getNonHiddenPoints() }} / {{ graded_gradeable.getGradeable.getAutogradingConfig().getTotalNonHiddenNonExtraCredit() }}
        {% endif %}
    </td>
{% endmacro %}

{# Graded Questions #}
{% macro render_column_graded_questions(context, section, graded_gradeable, index, info, column) %}
    <td class="td-graded-questions" style="text-align: center">
        <span>
            {%- for index in 0..info.graded_groups|length-1 -%}
            {# Non-Peer View for Stoplights #}
            {% if core.getUser().accessGrading() %}
                    {%  if graded_gradeable.getAutoGradedGradeable().getActiveVersion() == 0%}
                        <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-NULL"></i>
                    {% else %}
                        {% if info.graded_groups[index] =="peer-null"   %}
                            {# Indicates Peer Component #}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-NULL"></i>
                        {% elseif info.graded_groups[index] == 4   %}
                            {# Indicates Graded Peer Component #}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-{{- info.graded_groups[index] -}}"></i>
                        {% else %}
                            {# Indicates Non-Peer Component (Visible)#}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-{{- info.graded_groups[index] -}}"></i>
                        {% endif %}
                    {% endif %}
            {% endif %}
            {# Peer View for Stoplights #}
            {% if core.getUser().getGroup() == 4 %}
                    {# If no submission has been made, non peer should not be visible to peer grader #}
                    {%  if graded_gradeable.getAutoGradedGradeable().getActiveVersion() == 0  %}
                        {% if info.graded_groups[index] =="peer-null"   %}
                            {# Indicates Ungraded Peer Component #}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-
                            circle grader-NULL }}"></i>
                        {% else %}
                            {# Indicates Non-Peer Component (Hidden)#}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle hide-highlights"></i>
                        {% endif %}
                    {% else %}
                        {# If submission has been made but not graded, non peer information should not be visible to peer grader #}
                        {%  if info.graded_groups[index] == "peer-no-submission" %}
                            {# Indicates Not Submitted Peer Component #}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-NULL"></i>
                        {% elseif info.graded_groups[index] =="peer-null"   %}
                            {# Indicates Submitted but Ungraded Peer Component #}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-NULL"></i>
                        {% elseif info.graded_groups[index] == 4 %}
                            {# Indicates Submitted and Graded Peer Component #}
                             <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle grader-{{- info.graded_groups[index] -}}"></i>
                        {% else %}
                            {# Indicates Non-Peer Component (Hidden)#}
                            <i title="{{graded_gradeable.getGradeable().getComponents()[index].getTitle()}}" class="fas fa-circle hide-highlights"></i>
                        {% endif %}
                    {% endif %}
                {% endif %}
            {%- endfor -%}
        </span>
    </td>
{% endmacro %}

{# Grading Button #}
{% macro render_column_grading(context, section, graded_gradeable, index, info, column, overrides, anon_ids) %}
    {% set badge_count = 0 %}

    {% if graded_gradeable.getSubmitter().getId() in overrides %}
        {% set contents = "Overridden" %}
        {% set btn_class = "btn-default" %}


    {% elseif not graded_gradeable.getAutoGradedGradeable().hasSubmission() %}
        {% set contents = "No Submission" %}
        {% set btn_class = "btn-default" %}

    {% elseif graded_gradeable.getAutoGradedGradeable().getActiveVersion() == 0 %}
        {% set contents = "Cancelled Submission" %}
        {% set btn_class = "btn-default" %}

    {% elseif info.on_time_submission == false %}
        {% set contents = "Too Many Days Late" %}
        {% set btn_class = "btn-danger" %}

    {% elseif graded_gradeable.getGradeable().isTaGrading() %}
            {% set contents = "Grade" %}
            {% set btn_class = "btn-primary" %}

        {% if graded_gradeable.getOrCreateTaGradedGradeable().anyGrades() %}
            {% if graded_gradeable.getTaGradedGradeable().hasVersionConflict() %}
                {% set contents = "Version Conflict" %}
                {% set btn_class = "btn-primary" %}
            {% elseif not graded_gradeable.isTaGradingComplete() and core.getUser().accessGrading() or core.getUser().getGroup() == 4 and not graded_gradeable.isPeerGradingComplete() %}
                {% set contents = "Grading Incomplete" %}
            {% elseif graded_gradeable.isTaGradingComplete() and core.getUser().getGroup() == 4 and graded_gradeable.isPeerGradingComplete() %}
                {% set contents = graded_gradeable.getTaGradedGradeable.getTotalScore(core.getUser()) ~ " / " ~ graded_gradeable.getGradeable().getPeerPoints() %}
                {% set btn_class = "btn-default" %}
            {% elseif not graded_gradeable.isTaGradingComplete() and core.getUser().getGroup() == 4 and graded_gradeable.isPeerGradingComplete() %}
                {% set contents = graded_gradeable.getTaGradedGradeable.getTotalScore(core.getUser()) ~ " / " ~ graded_gradeable.getGradeable().getPeerPoints() %}
                {% set btn_class = "btn-default" %}
            {% elseif graded_gradeable.isTaGradingComplete() and core.getUser().accessGrading() and graded_gradeable.isPeerGradingComplete() %}
                {% set contents = graded_gradeable.getTaGradedGradeable.getTotalScore() ~ " / " ~ graded_gradeable.getGradeable().getManualGradingPoints() %}
                {% set btn_class = "btn-default" %}
            {% endif %}
        {% endif %}
    {% else %}
        {% set contents = "View" %}
        {% set btn_class = "btn-primary" %}
    {% endif %}
    {% if graded_gradeable.hasActiveGradeInquiry() %}
        {% set contents = contents ~ " + Grade Inquiry" %}
        {% set btn_class = "btn-danger" %}
        {% set badge_count = graded_gradeable.getActiveGradeInquiryCount()  %}
    {%  endif %}
    <td style="text-align: center;">
        <a data-testid="grade-button" {% if graded_gradeable.hasActiveGradeInquiry() %}data-grade-inquiry="true"{% endif %} class="grade-button btn {{ btn_class }}" href="{{ context.grade_url }}?who_id={{ anon_ids[graded_gradeable.getSubmitter().getId()] }}&sort={{ context.sort }}&direction={{ context.direction }}">
            {{ contents }}
            {% if badge_count > 0 and graded_gradeable.getGradeable().isGradeInquiryPerComponentAllowed()%}
                <span class="notification-badge">{{ badge_count }}</span>
            {% endif %}
        </a>
    </td>
{% endmacro %}

{# Grading Button (peer) TODO: fix this for peer grading support #}
{% macro render_column_grading_blind(context, section, graded_gradeable, index, info, column, overrides, anon_ids) %}
    {% if  graded_gradeable.getSubmitter().getId() in overrides %}
        {% set contents = "Overridden" %}
        {% set btn_class = "btn-default" %}
    {% elseif not graded_gradeable.getAutoGradedGradeable().hasSubmission() %}
        {% set contents = "No Submission" %}
        {% set btn_class = "btn-default" %}
    {% elseif graded_gradeable.getAutoGradedGradeable().getActiveVersion() == 0 %}
        {% set contents = "Cancelled Submission" %}
        {% set btn_class = "btn-default" %}
    {% elseif graded_gradeable.getGradeable().isTaGrading() %}
        {% set contents = "Grade" %}
        {% set btn_class = "btn-primary" %}
        {% if graded_gradeable.getOrCreateTaGradedGradeable().anyGrades() %}
            {% if graded_gradeable.getTaGradedGradeable().hasVersionConflict() %}
                {% set contents = "Version Conflict" %}
                {% set btn_class = "btn-primary" %}
            {% elseif not graded_gradeable.isTaGradingComplete() and core.getUser().accessGrading() or core.getUser().getGroup() == 4 and not graded_gradeable.isPeerGradingComplete() %}
                {% set contents = "Grading Incomplete" %}
            {% elseif graded_gradeable.isTaGradingComplete() and core.getUser().getGroup() == 4 and graded_gradeable.isPeerGradingComplete() %}
                {% set contents = graded_gradeable.getTaGradedGradeable.getTotalScore(core.getUser()) ~ " / " ~ graded_gradeable.getGradeable().getPeerPoints() %}
                {% set btn_class = "btn-default" %}
            {% elseif not graded_gradeable.isTaGradingComplete() and core.getUser().getGroup() == 4 and graded_gradeable.isPeerGradingComplete() %}
                {% set contents = graded_gradeable.getTaGradedGradeable.getTotalScore(core.getUser()) ~ " / " ~ graded_gradeable.getGradeable().getPeerPoints() %}
                {% set btn_class = "btn-default" %}
            {% elseif graded_gradeable.isTaGradingComplete() and core.getUser().accessGrading() and graded_gradeable.isPeerGradingComplete() %}
                {% set contents = graded_gradeable.getTaGradedGradeable.getTotalScore() ~ " / " ~ graded_gradeable.getGradeable().getManualGradingPoints() %}
                {% set btn_class = "btn-default" %}
            {% endif %}
        {% endif %}
    {% else %}
        {% set contents = "View" %}
        {% set btn_class = "btn-primary" %}
    {% endif %}
    {% if graded_gradeable.hasActiveGradeInquiry() %}
        {% set contents = contents ~ " + Grade Inquiry" %}
        {% set btn_class = "btn-danger" %}
        {% set badge_count = graded_gradeable.getActiveGradeInquiryCount()  %}
    {%  endif %}
    <td style="text-align: center;">
        <a data-testid="grade-button" {% if graded_gradeable.hasActiveGradeInquiry() %}data-grade-inquiry="true"{% endif %} class="grade-button btn {{ btn_class }}" href="{{ context.grade_url }}?who_id={{ anon_ids[graded_gradeable.getSubmitter().getId()] }}&sort={{ context.sort }}&direction={{ context.direction }}">
            {{ contents }}
            {% if badge_count is defined and badge_count > 0 and graded_gradeable.getGradeable().isGradeInquiryPerComponentAllowed()%}
                <span class="notification-badge">{{ badge_count }}</span>
            {% endif %}
        </a>
    </td>
{% endmacro %}


{# Index #}
{% macro render_column_index(context, section, graded_gradeable, index, info, column) %}
    <td>{{ index }}</td>
{% endmacro %}

{# Section Number #}
{% macro render_column_section(context, section, graded_gradeable, index, info, column) %}
    <td>{{ section.title }}</td>
{% endmacro %}

{# Edit Team #}
{% macro render_column_team_edit(context, section, graded_gradeable, index, team_edit_onclick, column, edited_past_lock_date) %}
    <td>
        <div>
            <a onclick="{{ team_edit_onclick }}" title="Edit Team" aria-label="Edit Team" class="key_to_click" tabindex="0"><i class="fas fa-pencil-alt"></i></a>
            {% if edited_past_lock_date %}
                <div style="display:inline-block;" title="Edited Past Lock Date" aria-label="Edited Past Lock Date"><i class="fas fa-exclamation red-message"></i></div>
            {% endif %}
        </div>
    </td>
{% endmacro %}

{# Team ID #}
{% macro render_column_team_id(context, section, graded_gradeable, index, info, column) %}
    <td>
        {% if graded_gradeable.getGradeable().isTeamAssignment() %}
            {{ graded_gradeable.getSubmitter.getId() }}
        {% endif %}
    </td>
{% endmacro %}
{# Anonymous Team ID #}
{% macro render_column_team_id_anon(context, section, graded_gradeable, index, info, column, anon_ids) %}
    <td>
        {{anon_ids[graded_gradeable.getSubmitter().getId()]}}
    </td>
{% endmacro %}

{# Team Name #}
{% macro render_column_team_name(context, section, graded_gradeable, index, info, column, max_team_name_length) %}
    <td>
        {# existing teams names over max length get truncated down on display #}
        {% if graded_gradeable.getSubmitter().getTeam().getTeamName()|length > max_team_name_length %}
          {{ graded_gradeable.getSubmitter().getTeam().getTeamName()|slice(0, max_team_name_length) ~ '...' }}
        {% else %}
          {{ graded_gradeable.getSubmitter().getTeam().getTeamName() }}
        {% endif %}
    </td>
{% endmacro %}

{# Team Members #}
{% macro render_column_team_members(context, section, graded_gradeable, index, info, column) %}
    <td>
        {% if not graded_gradeable.getGradeable().isTeamAssignment() %}
            {{ graded_gradeable.getSubmitter().getUser().getDisplayedGivenName() }}
            {{ graded_gradeable.getSubmitter().getUser().getDisplayedFamilyName() }}
        {% else %}
            {%- for member in graded_gradeable.getSubmitter().getTeam().getMemberUsersSorted() -%}
                {%- if loop.index != 1 -%}, {% endif -%}
                {{- member.getDisplayedGivenName() }}
                {{ member.getDisplayedFamilyName() -}}
            {%- endfor -%}
        {% endif %}
    <div style="font-style: italic; display: inline; color: var(--standard-medium-dark-gray);">
        {% if graded_gradeable.getGradeable().isTeamAssignment() %}
            {%- for member in graded_gradeable.getSubmitter().getTeam().getInvitedUsers() -%}
                {%- if loop.index == 1 -%}Pending: {% endif -%}
                {%- if loop.index != 1 -%}, {% endif -%}
                {{- member.getDisplayedGivenName() }}
                {{ member.getDisplayedFamilyName() -}}
                {%- if member.hasMultipleTeamInvites(graded_gradeable.getGradeableId()) -%}
                    <div style="display:inline-block;" title="Multiple Pending Invites" aria-label="Multiple Pending Invites">(<i class="fas fa-exclamation-triangle" style="color: var(--standard-medium-dark-gray);"></i>)</div>
                {%- endif -%}
            {%- endfor -%}
        {% endif %}
    </div>
    </td>
{% endmacro %}

{# Total Point Summary #}
{% macro render_column_total(context, section, graded_gradeable, index, info, column) %}

    {% set box_background = (graded_gradeable.getAutoGradedGradeable().getActiveVersionInstance() is not null and graded_gradeable.getAutoGradedGradeable().getActiveVersionInstance().getDaysLate() > graded_gradeable.getGradeable().getLateDays()) ? "late-box" : "" %}

    {# todo: this is a lot of math for the view, we should move this into the Gradeable model #}

    {# Always get autograder points #}
    {% set graded = graded_gradeable.getAutoGradedGradeable().getActiveVersionInstance().getTotalPoints() | default(0) %}
    {# If they have a valid, graded submission then they get points from it #}
    {% if graded_gradeable.getAutoGradedGradeable().hasSubmission() and graded_gradeable.getAutoGradedGradeable().getActiveVersion() != 0 and graded_gradeable.isTaGradingComplete() and not graded_gradeable.getOrCreateTaGradedGradeable().hasVersionConflict() %}
        {% set graded = graded + graded_gradeable.getOrCreateTaGradedGradeable().getTotalScore() %}
    {% endif %}
    {# Negative grades are not possible #}
    {% if graded < 0 %}
        {% set graded = 0 %}
    {% endif %}

    {% set total_possible = graded_gradeable.getGradeable().getAutoGradingConfig().getTotalNonExtraCredit() + graded_gradeable.getGradeable().getManualGradingPoints() %}
    <td>
        {% if not graded_gradeable.getOrCreateTaGradedGradeable().hasVersionConflict() and graded_gradeable.isTaGradingComplete() %}
                <div class="{{ box_background }}" style="white-space: nowrap;">{{ graded }} / {{ total_possible }}</div>
        {% endif %}
    </td>
{% endmacro %}

{# User ID #}
{% macro render_column_user_id(context, section, graded_gradeable, index, info, column) %}
    <td>
        {% if not graded_gradeable.getGradeable().isTeamAssignment() %}
            {{ graded_gradeable.getSubmitter.getId() }}
        {% endif %}

    </td>
{% endmacro %}

{# Anonymous ID #}
{% macro render_column_user_id_anon(context, section, graded_gradeable, index, info, column, anon_ids) %}
    <td>{{ anon_ids[graded_gradeable.getSubmitter().getId()] }}</td>
{% endmacro %}

{% macro render_column_team_members_anon(context, section, graded_gradeable, index, info, column, anon_ids) %}
    <td>
        {% if not graded_gradeable.getGradeable().isTeamAssignment() %}
            {{ anon_ids[graded_gradeable.getSubmitter().getId()] }}
        {% else %}
            {%- for member in graded_gradeable.getSubmitter().getTeam().getMemberUsersSorted() -%}
                {%- if loop.index != 1 -%}, {% endif -%}
                {{- anon_ids[member.getId()] -}}
            {%- endfor -%}
        {% endif %}
    <div style="font-style: italic; display: inline; color: grey;">
        {% if graded_gradeable.getGradeable().isTeamAssignment() %}
            {%- for member in graded_gradeable.getSubmitter().getTeam().getInvitedUsers() -%}
                {%- if loop.index == 1 -%}Pending: {% endif -%}
                {%- if loop.index != 1 -%}, {% endif -%}
                {{- anon_ids[member.getId()] -}}
            {%- endfor -%}
        {% endif %}
    </div>
    </td>
{% endmacro %}

{# Given Name #}
{% macro render_column_user_given(context, section, graded_gradeable, index, info, column) %}
    <td>{{ graded_gradeable.getSubmitter().getUser().getDisplayedGivenName() }}</td>
{% endmacro %}

{# Family Name #}
{% macro render_column_user_family(context, section, graded_gradeable, index, info, column) %}
    <td>{{ graded_gradeable.getSubmitter().getUser().getDisplayedFamilyName() }}</td>
{% endmacro %}

{# Viewed Grade #}
{% macro render_column_viewed_grade(context, section, graded_gradeable, index, info, column, team_gradeable_view_history) %}
    {% if graded_gradeable.getAutoGradedGradeable().getActiveVersion() > 0 %}
        {% if graded_gradeable.getSubmitter().isTeam() %}
            {% if team_gradeable_view_history[graded_gradeable.getSubmitter().getId()]['hover_string'] == '' %}
                <td class="viewed-red-x" title="">&#10008;</td>
            {% else %}
                <td class="td-viewed-grade" id="team-check-marks" title="{{ team_gradeable_view_history[graded_gradeable.getSubmitter().getId()]['hover_string'] }}">
                    {% for user_id, time in team_gradeable_view_history[graded_gradeable.getSubmitter().getId()]|filter((time, user_id) => user_id != 'hover_string') %}
				        {% if time == null %}
                            <i class="viewed-white-check">&#x2714;</i>
                        {% else %}
                            <i class="viewed-green-check">&#x2714;</i>
                        {% endif %}
                    {% endfor %}
                </td>
            {% endif %}
        {% else %}
            {% if graded_gradeable.getOrCreateTaGradedGradeable().getUserViewedDate() == null %}
                <td class="viewed-red-x" title="">&#10008;</td>
            {% else %}
                <td class="viewed-green-check" title="Last Viewed: {{ graded_gradeable.getOrCreateTaGradedGradeable().getUserViewedDate()|date }}">&#x2714;</td>
            {% endif %}
        {% endif %}
    {% else %}
        <td></td>
    {% endif %}
{% endmacro %}

{# /Column functions #}
<script>
    function changeSections() {
        const status = {{ view_all ? 1 : 0 }};
        if (status) {
            Cookies.set('view', 'assigned', { path: '/' });
            localStorage.setItem("general-setting-navigate-assigned-students-only", "true");
        } else {
            Cookies.set('view', 'all', { path: '/' });
            localStorage.setItem("general-setting-navigate-assigned-students-only", "false");
        }
        location.reload();
    }

    function changeAnon(gradeable_id) {
        Cookies.set(`default_anon_mode_${gradeable_id}_override`, 'on');
        const status = {{ anon_mode ? 1 : 0}};
        if (status) {
            Cookies.set(`anon_mode_${gradeable_id}`, 'off');
        }
        else {
            Cookies.set(`anon_mode_${gradeable_id}`, 'on');
        }
        location.reload();
    }

    function change_inquiry() {
        var button = document.getElementById('inquiryButton');
        var status = Cookies.get('inquiry_status');
        if(status === 'on') {
            status = 'off'
        }
        else{
            status = 'on';
        }
        if(status === 'on') {
            Cookies.set('inquiry_status', 'on');
            var inquiry = Cookies.get('inquiry_status');
            grade_inquiry_only();
            button.textContent = "Grade Inquiry Only: On";
        } else {
            Cookies.set('inquiry_status', 'off');
            var inquiry = Cookies.get('inquiry_status');
            reverse_inquiry_only();
            button.textContent = "Grade Inquiry Only: Off";
        }
    }

    
    function changeSortOrder() {
        if ({{ sort == 'random' ? "true" : "false" }}) {
            Cookies.set('sort', 'id');
        }
        else {
            Cookies.set('sort', 'random');
        }
        location.reload();
    }

    function sortTableByColumn(sort_type = 'id', direction) {
        Cookies.set('sort', sort_type);
        Cookies.set('direction', direction);
        location.reload();
    }

    //function to count how many submissions are being regraded so that a confirm message can be displayed if necessary
    function ajaxCountRegrade(choice,e,confirmMessage) {
        const submit_url = buildCourseUrl(['gradeable', "{{ gradeable.getId }}", 'regrade', 'count']);
        let formData = new FormData();
        formData.append('csrf_token', csrfToken);
        formData.append('gradeable_id', "{{ gradeable.getId }}");
        //if regrading all versions
        if (choice) {
            formData.append('regrade_all', 'true');
        }
        else {
            formData.append('regrade_all', 'false');
        }
        $.ajax({
            url: submit_url,
            data: formData,
            processData: false,
            type: 'POST',
            headers : {
                Accept: "application/json"
            },
            contentType: false,
            success: function(data) {
                data = JSON.parse(data);
                if (data['status'] === 'success') {
                    confirmMessage(e, data['data'], choice);
                }
                else {
                    alert("ERROR! Please contact administrator with following error:\n\n" + data['message']);
                }
            }
        });
    }
    function confirmMessage(e,count, choice) {
        if(count > 50) {
            e.preventDefault();
            if (window.confirm("Are you sure you want to add " + count + " submissions to the queue ?")) {
                //if regrading all versions
                if (choice) {
                    handleRegrade(0, csrfToken, "{{ gradeable.getId }}", '', false, false, false, true)
                }
                else {
                    handleRegrade(0, csrfToken, "{{ gradeable.getId }}", '', false, false, true)
                }
            }
        }
        else {
            //if regrading all versions
            if (choice) {
                handleRegrade(0, csrfToken, "{{ gradeable.getId }}", '', false, false, false, true)
            }
            else {
                handleRegrade(0, csrfToken, "{{ gradeable.getId }}", '', false, false, true)
            }
        }
    }
</script>

{% include 'grading/electronic/GradeableMessage.twig' with {
    "course": course,
    "semester": semester,
    "gradeable_id": gradeable.getId,
    "blind_status": blind_status
}%}
