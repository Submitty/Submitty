<div class="content">
    <h1>
        {{ poll.getName() }}
    </h1>

    <hr>

    {% if timer_enabled %}
    <!-- Invisible until JS renders -->
        <h2 id="timer" class="timer" style="display:none" data-testid="timer">
            <label for="timerDisplay">
                Time until Poll Ends:
            </label>
            <span id="timerDisplay"></span>
        </h2>
    {% endif %}

    {% if user_admin or poll.isHistogramAvailable() %}
        <button class="btn btn-primary" id='toggle-info-button' onclick="toggle_section('poll-info')">Toggle Poll Info</button>
        <button class="btn btn-primary" id='toggle-histogram-button' onclick="toggle_section('poll-histogram')">Toggle Histogram</button>
    {% endif %}
    <br/>
    <div class="poll-view-table" id="info-histogram-table">
        <div class="poll-view-wrapper info-wrapper" id="poll-info">
            {% include "misc/Markdown.twig" with {
                "content": poll.getQuestion(),
            } only %}
            {% if file_data is not null %}
                <br/>
                <img src="{{ file_data }}">
                <br/>
            {% endif %}
            <form method="post" action="{{ base_url }}/submitResponse">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}"/>
                <input type="hidden" name="poll_id" value="{{ poll.getId() }}"/>
                <fieldset>
                    <legend>
                        <h2>
                            Possible responses:
                        </h2>
                    </legend>
                    <table class="poll-content">
                    {% set button_type = is_single_response ? "radio": "checkbox" %}
                    {% if not user_admin %}
                        <tr class="radio" for="answer-no-response">
                            <td class="option-btn">
                            <input class="no-response-radio"
                                   type="{{button_type}}"
                                   value="-1"
                                   name="answers[]"
                                   id="answer-no-response"
                                   {{ poll.getUserResponses()|length == 0 ? "checked" : "" }}
                                   {{ (not user_admin and poll.isOpen()) ? "" : "disabled" }}
                                   onchange="clearResponses()"
                            />
                            </td>
                            <td class="no-response option-text">
                            No response
                            </td>
                        </tr>
                    {% endif %}
                    {% set index = 0 %}

                    {% set user_selections = poll.getSelectedOptionIds() %}
                    {% for option in poll.getOptions() %}
                        <tr class="radio option-row" id = "option-row-{{ option.getId() }}">
                            <td class="option-btn">
                            <input class="response-radio"
                                   type={{ button_type }}
                                   aria-label="Option {{ index + 1 }}"
                                   value="{{ option.getId() }}"
                                   name="answers[]"
                                   id="answer-{{index}}"
                                   data-testid="answer-{{index}}"
                                   {{ not user_admin and option.getId() in user_selections ? "checked" : "" }}
                                   {{ (not user_admin and poll.isOpen()) ? "" : "disabled" }}
                                   onchange="disableNoResponse();"
                            />
                            </td>
                            <td class="option-text" id = "markdown-{{index}}">
                            {% include "misc/Markdown.twig" with {
                                "content" : option.getResponse(),
                                "style": "display: inline"
                            } only %}
                            {% if ((poll.getAllowsCustomResponses() and option.isCustom()) and (user_id == option.getAuthorId())) %}
                                <button
                                    type="button"
                                    data-testid="custom-response-delete"
                                    class="move-btn delete-btn"
                                    aria-label="Delete Custom Response"
                                    style="border:0; padding:0;"
                                    onclick="removeCustomResponse({{ poll.getId() }}, {{ option.getId() }}, '{{ base_url }}');">
                                    <i class="fas fa-trash black-btn"></i>
                                </button>
                            {% endif %}
                            {% if option.isCorrect() and poll.isReleaseAnswer()%}
                                <span class="fa-stack fa-2xs correct-tag">
                                    <i class="fa fa-circle fa-stack-2x correct-tag-background"></i>
                                    <i class="fa fa-check fa-stack-1x fa-xl correct-tag-checkmark"></i>
                                </span>
                            {% endif %}
                            </td>
                        </tr>
                        {% set index = index + 1 %}
                    {% endfor %}
                    </table>
                </fieldset>
                {% if not user_admin and poll.isOpen() %}
                    <button type="submit" data-testid="submit-answer" class="btn btn-primary student-submit">Submit</button>
                {% endif %}
            </form>
            {% if not user_admin and poll.isOpen() and poll.getAllowsCustomResponses() %}
                <div class = 'info-wrapper custom-response-wrapper'>
                    <input type="hidden" name="csrf_token" value="{{ csrf_token }}"/>
                    <input type="hidden" name="poll_id" value="{{ poll.getId() }}"/>
                    <br />
                    <div class="response-container">
                        <textarea
                            aria-label="Response text"
                            data-testid="custom-response-text"
                            class="poll-response custom-poll-response"
                            name="custom-response"
                            placeholder="Enter response here..."
                            rows="10" cols="30"></textarea>
                    </div>
                    <i>
                        This response will be visible to every student.<br />
                    </i>
                    <button
                        type="button"
                        data-testid="custom-response-submit"
                        class="btn btn-primary student-submit custom-response-submit"
                        onclick = "addCustomResponse({{poll.getId()}},'{{base_url}}');">
                        Add Response</button>
                    <script>
                        $(document).ready(() => {
                            validateCustomResponse();
                        });
                    </script>
                </div>
            {% endif %}
        </div>
        {% if user_admin or poll.isHistogramAvailable() %}
            <div class="poll-view-wrapper histogram-wrapper" id="poll-histogram" style="display: none;">
                <div id="chartContainer"></div>
            </div>
        {% endif %}
    </div>
</div>

<script>

    {% if timer_enabled %}

        const endDate = new Date('{{ end_time }}');
        let timerId;

        function updateTimer() {
            const now = new Date();
            const timeRemaining = endDate - now;
            const timerDisplayElement = $('#timerDisplay');
            const timerElement = $('#timer');

            // Show the timer element once we're ready to start updating it
            timerElement.show();

            if (timeRemaining <= 0) {
                if (timerElement) {
                    timerElement.text('Poll Ended');
                }
                clearInterval(timerId);
                return;
            }

            if (!timerDisplayElement) {
                clearInterval(timerId);
                return;
            }

            const seconds = Math.floor((timeRemaining / 1000) % 60);
            const minutes = Math.floor((timeRemaining / (1000 * 60)) % 60);
            const hours = Math.floor((timeRemaining / (1000 * 60 * 60)) % 24);

            const hoursUpdated = (hours < 10) ? `0${hours}` : hours;
            const minutesUpdated = (minutes < 10) ? `0${minutes}` : minutes;
            const secondsUpdated = (seconds < 10) ? `0${seconds}` : seconds;

            timerDisplayElement.text(`${hoursUpdated}:${minutesUpdated}:${secondsUpdated}`);
        }

        timerId = setInterval(updateTimer, 20);
    {% endif %}

    {% if user_admin or poll.isHistogramAvailable() %}
        window.onload = function () {
            const data = [{
                type: "bar",
                x: [],
                y: [],
                marker: {
                    color: [],
                },
            }];
            const [correctColor, defaultColor] =
            [window.getComputedStyle(document.body).getPropertyValue('--histogram-correct'),
                window.getComputedStyle(document.body).getPropertyValue('--histogram-default')];
            {% for option in poll.getOptions() %}
                data[0].x.push("{{ option.getResponse()|replace({"\n": " ", "\r": " ", "\t": " "}) }}");
                data[0].y.push({{ response_counts[option.getId()] }});
                data[0].marker.color.push(
                    {{ option.isCorrect() and poll.isReleaseAnswer() ? 'correctColor': 'defaultColor' }}
                );
            {% endfor %}
            const title_text = new DOMParser().parseFromString("{{ poll.getName() }}", "text/html");
            const width = get_new_chart_width();
            const layout = {
                title: title_text.documentElement.textContent,
                paper_bgcolor: $("body").css("--default-white"),
                plot_bgcolor: $("body").css("--default-white"),
                font: {
                    color: $("body").css("--text-black")
                },
                width: width
            }
            Plotly.newPlot("chartContainer", data, layout);
            window.addEventListener('resize', function() {
                const width = get_new_chart_width();
                const container = document.getElementById('chartContainer');
                const update = {
                    width: width
                }
                Plotly.relayout(container, update);
            });
        }
    {% endif %}
</script>
