<script>
    function tracing(xBuckets,yValue) {
        var trace1 = {
            x: xBuckets,
            y: yValue,
            mode: 'markers',
            name: 'Students with Each Score',
            type: 'bar',
            text: yValue,
            textposition: 'auto',
            hoverinfo: 'none',
            marker: {
                color: 'rgb(48,99,152)',
                opacity: 1.0,
                line: {
                    color: 'rbg(170,170,170)',
                    width: 1.5
                }
            }
        };
        var data = [trace1];
        return data;
    }

    function fillBuckets(range,increment,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min){
        let loop = Math.ceil(range/increment);
        let tracking = min;
        for(i = 0;i<loop;i++){
            betterBuckets.set(tracking,0);
            tracking = +parseFloat(tracking+increment).toPrecision(4);
            if(i===(loop-1)){
                xBuckets.push(+parseFloat(tracking-increment).toPrecision(4)+" to <="+max);
            }
            else{
               xBuckets.push(+parseFloat(tracking-increment).toPrecision(4)+" to <"+tracking);
            }
        }
        var maxMin = tracking-increment;
        var ct = 0;
        for(i = 0;i<xValue.length;i++){
           ct++;
           for(var [key,value] of betterBuckets){
                if(key===maxMin){
                    if(xValue[i]>=key&&xValue[i]<=max){
                       betterBuckets.set(key,value+1);
                   }
                }
               else{
                    if(xValue[i]>=key && xValue[i]<(key+increment)){
                        betterBuckets.set(key,value+1);
                    }
                }
           }
        }
        for(var[key,value]of betterBuckets){
            if(value>modeCount){
                modeCount=value;
                mode = key+" to <"+(key+increment);
            }
            yValue.push(value);
        }
        return mode;
    }


    function fillBucketsForRange(range,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min){
        let bucketSize = Math.floor(range / 10);
        if (bucketSize === 0) {
            bucketSize = range / 10;
        }

        return fillBuckets(range,bucketSize,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
    }


    function createNewBuckets(range,buckets,xValue,yValue,xBuckets,mode,modeCount,max,min) {
        var bucketInputTotal = document.getElementById("bucket-size-total");
        var bucketInputAuto = document.getElementById("bucket-size-auto");
        var bucketInputManual = document.getElementById("bucket-size-manual");

        xBuckets = [];
        yValue=[];
        betterBuckets=new Map();
        mode=0;
        modeCount=0;

        if( bucketInputTotal && bucketInputTotal.value !=''){
            let bucketInputTotalValue = parseFloat(bucketInputTotal.value);
            if (isNaN(bucketInputTotalValue) || bucketInputTotalValue === 0) {
                alert('Error: Invalid bucket size.');
                return;
            }
            mode=fillBuckets(range,bucketInputTotalValue,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
            var dataTotal=tracing(xBuckets,yValue);
            Plotly.newPlot('Histogram', dataTotal, layout, {displayModeBar: false,displaylogo: false});
            bucketInputTotal.value='';
            document.getElementById("SmallHistogram").innerHTML=
                '<span>' +
                    '<b>Mean: </b>' +
                    {{ overall_average != null ? overall_average.getAverageScore() | default(0) : 0 }}
                    + '</span>' +
                    '<span><b>Mode: </b>' + mode + '</span>' +
                    '<span><b>Median: </b>' + median + '</span>' +
                    '<span><b>Minimum: </b>' + min + '</span>' +
                    '<span><b>Maximum: </b>' + max + '</span>' +
                    '<span><b>Range: </b>' + (max - min) + '</span>' +
                    '<span><b>Standard Deviation: </b>' +
                    {{ overall_average != null ? overall_average.getStandardDeviation() | default(0) : 0 }} +
                '</span>'
            return mode;
        }

        if(bucketInputAuto && bucketInputAuto.value != ''){
            let bucketInputAutoValue = parseFloat(bucketInputAuto.value);
            if (isNaN(bucketInputAutoValue) || bucketInputAutoValue === 0) {
                alert('Error: Invalid bucket size.');
                return ;
            }
            mode=fillBuckets(range,bucketInputAutoValue,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
            var dataAuto = tracing(xBuckets,yValue);
            Plotly.newPlot('Histogram3', dataAuto, layout, {displayModeBar: false,displaylogo: false});
            bucketInputAuto.value='';
            document.getElementById("SmallHistogram3").innerHTML=
                '<span>' +
                    '<b>Mean: </b>' +
                    {{ autograded_average != null ? autograded_average.getAverageScore() | default(0) : 0 }}
                    + '</span>' +
                    '<span><b>Mode: </b>' + mode + '</span>' +
                    '<span><b>Median: </b>' + median + '</span>' +
                    '<span><b>Minimum: </b>' + min + '</span>' +
                    '<span><b>Maximum: </b>' + max + '</span>' +
                    '<span><b>Range: </b>' + (max - min) + '</span>' +
                    '<span><b>Standard Deviation: </b>' +
                    {{ autograded_average != null ? autograded_average.getStandardDeviation() | default(0) : 0 }} +
                '</span>'
            return mode;
        }

        if(bucketInputManual && bucketInputManual.value!=''){
            let bucketInputManualValue = parseFloat(bucketInputManual.value);
            if (isNaN(bucketInputManualValue) || bucketInputManualValue === 0) {
                alert('Error: Invalid bucket size.');
                return ;
            }
            mode=fillBuckets(range,bucketInputManualValue,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
            var dataAuto = tracing(xBuckets,yValue);
            Plotly.newPlot('Histogram4', dataAuto, layout, {displayModeBar: false,displaylogo: false});
            bucketInputManual.value='';
            document.getElementById("SmallHistogram4").innerHTML=
                '<span>' +
                    '<b>Mean: </b>' +
                    {{ manual_average != null ? manual_average.getAverageScore() | default(0) : 0 }}
                    + '</span>' +
                    '<span><b>Mode: </b>' + mode + '</span>' +
                    '<span><b>Median: </b>' + median + '</span>' +
                    '<span><b>Minimum: </b>' + min + '</span>' +
                    '<span><b>Maximum: </b>' + max + '</span>' +
                    '<span><b>Range: </b>' + (max - min) + '</span>' +
                    '<span><b>Standard Deviation: </b>' +
                    {{ manual_average != null ? manual_average.getStandardDeviation() | default(0) : 0 }} +
                '</span>'
            return mode;
        }

        mode=fillBucketsForRange(range,betterBuckets,xValue,yValue,xBuckets,mode,modeCount,max,min);
        return  mode;
    }
</script>
<body>


<div class = "content">
    <h1>Stats of {{ gradeable_title }}</h1>

    {% if rotating_sections_error %}
        <div name="grader-warning-popup status">
            <p> WARNING: This page may be inaccurate.  <br />
                This gradeable assigns graders by Rotating Section, but Rotating Sections are not set up properly. <br />
                To fix Rotating Sections, go to the Manage Sections page. <br />
            </p>
        </div>
    {% endif %}

    {# Top buttons #}
    <div style="margin-top: 20px; vertical-align:bottom;">
        {% if graded_percentage != -1 or core.getUser().accessFullGrading() or peer %}
            <a class="btn btn-primary" data-testid="Grading Index" style="float: left"
                href="{{ details_url }}">

                Grading Index
            </a>
            <ul style="margin-left: 25px; margin-top: -5px; float: left">
                <li>View Submissions</li>
                {%  if team_assignment and can_manage_teams %}
                    <li>Manage Teams</li>
                {% endif %}
                {% if component_averages|length != 0 %}
                    <li>Manual Grading</li>
                    <li>Grade Inquiries</li>
                {% endif %}
            </ul>
        {% endif %}
    </div>

        {% if not peer %}
        <a class="btn btn-default edit-filters-button" style="float: right" onclick="showStatusFilterForm()">
            Edit Filters
        </a>
    {% endif %}

    {# /Top Button #}
</div>

<div id="container-rubric" class = "content">
    {% if graded_percentage == -1 %}
        <div class="sub">
            No Grading To Be Done! :)
        </div>
    {% elseif core.getUser().getGroup() < 4 %}
        <form id="gradeable-form" class="form-signin" method="post" enctype="multipart/form-data" onsubmit="return checkForm();">
        <div class="tab-bar-wrapper">
            <a class="nav-bar key_to_click" id="page_0_nav" onclick="onChangeNavTab(0);">Data</a>
            <a class="nav-bar key_to_click" id="page_1_nav" onclick="onChangeNavTab(1);">Manual Grading Component Averages</a>
            <a class="nav-bar key_to_click" id="page_2_nav" onclick="onChangeNavTab(2);">Manual Grading Histogram</a>
            <a class="nav-bar key_to_click" id="page_3_nav" onclick="onChangeNavTab(3);">Autograding Histogram</a>
            <a class="nav-bar key_to_click" id="page_4_nav" onclick="onChangeNavTab(4);">Overall Histogram</a>
            <a class="nav-bar key_to_click" id="page_5_nav" onclick="onChangeNavTab(5);">Scatterplot</a>
        </div>
        <div class="modal-body gradeable-status-body">
            <div class="page-content" id="page_0_content">{{ include('grading/electronic/ta_status/StatusData.twig')     }}</div>

            {% if component_averages|length == 0 %}
                <div class="page-content missing-data-container" id="page_1_content"><p>No manual grading component averages data available.</p></div>
            {% else %}
                <div class="page-content" id="page_1_content">{{ include('grading/electronic/ta_status/StatusComponentAverages.twig')   }}</div>
            {% endif %}

            {% if ta_grading_enabled %}
                {% if component_averages|length == 0 or histograms['tTA']|length == 0 %}
                    <div class="page-content missing-data-container" id="page_2_content"><p>No manual grading data available.</p></div>
                {% else %}
                    <div class="page-content" id="page_2_content">{{ include('grading/electronic/ta_status/GradingHistogram.twig', {'type': 'manual'})  }}</div>
                {% endif %}
            {% endif %}

            {% if autograding_enabled %}
                {% if autograded_average == null or autograded_average.getCount() == 0 or histograms['bAuto']|length == 0 %}
                    <div class="page-content missing-data-container" id="page_3_content"><p>No autograding data available.</p></div>
                {% else %}
                    <div class="page-content" id="page_3_content">{{ include('grading/electronic/ta_status/GradingHistogram.twig', {'type': 'auto'})  }}</div>
                {% endif %}

                {% if histograms['runtime']|length == 0 or histograms['runtime'][0] == 0 %}
                    <div class="page-content missing-data-container" id="page_5_content"><p>No runtime data available.</p></div>
                {% else %}
                    <div class="page-content" id="page_5_content">{{ include('grading/electronic/ta_status/Scatterplot.twig') }}</div>
                {% endif %}
            {% endif %}

            {% if (overall_average == null or overall_average.getCount() == 0) or component_averages|length == 0 %}
                <div class="page-content missing-data-container" id="page_4_content"><p>No overall data available.</p></div>
            {% else %}
                <div class="page-content" id="page_4_content">{{ include('grading/electronic/ta_status/GradingHistogram.twig', {'type': 'total'})  }}</div>
            {% endif %}
        </div>
        <br/>
        </form>
    {% else %}
        {# This needs to be updated after randomization works correctly for Teams #}
        {% if team_assignment %}
            {# Update this after Teams work fine with Randomized Peer Assignments <br>
            <b>Total Teams assigned to grade:</b> {{ peer_total }} </b> <br>
            <b>Current percentage of student grading done:</b> {{ peer_percentage }}% ({{ peer_graded }}/{{ peer_total }})</b>
            #}
        {% else %}
            <b>Total peers assigned to grade:</b> {{ peer_total }} </b> <br>
            <b>Current percentage of student grading done:</b> {{ peer_percentage }}% ({{ peer_graded }}/{{ peer_total }})</b>
        {% endif %}
    {% endif %}
    <div style="margin-top: 20px;">
        {% if graded_percentage != -1 or core.getUser().accessFullGrading() or peer %}
            {% if core.getUser().getGradingRegistrationSections()|length != 0 %}
                {%  if team_assignment %}
                    <details class="btn btn-primary" id="details_button">
                        <summary>
                            <a id="zip_link_limited"
                                href="{{ download_zip_url }}">
                                Download Zip of Assigned Teams
                            </a>
                        </summary>

                        <div>
                            <form class="dropdown">
                                <input type="checkbox" id="results_folder" onclick="editZipDownload( '{{ download_zip_url }}', true )">
                                <label for="results_folder"> Include Results Folder</label><br>
                                <input type="checkbox" id="active_version" onclick="editZipDownload( '{{ download_zip_url }}', true )">
                                <label for="active_version"> Only Current Active Version</label><br>
                            </form>
                        </div>
                    </details>
                {% else %}
                    <details class="btn btn-primary" id="details_button">
                        <summary>
                            <a id="zip_link_limited"  
                                href="{{ download_zip_url }}">
                                Download Zip of Assigned Students
                            </a>
                        </summary>

                        <div>
                            <form class="dropdown">
                                <input type="checkbox" id="results_folder" onclick="editZipDownload( '{{ download_zip_url }}', true )">
                                <label for="results_folder"> Include Results Folder</label><br>
                                <input type="checkbox" id="active_version" onclick="editZipDownload( '{{ download_zip_url }}', true )">
                                <label for="active_version"> Only Current Active Version</label><br>
                            </form>
                        </div>
                    </details>
                {% endif %}

            {% endif %}
            {% if core.getUser().accessFullGrading() and submitted_total %}
                <details class="btn btn-default" id="details_button">
                    <summary>
                        <a id="zip_link_full"
                            href="{{ download_zip_url }}?type=all">
                            Download Zip of All Students
                        </a>
                    </summary>
                   
                    <div>
                        <form class="dropdown">
                            <input type="checkbox" id="results_folder" onclick="editZipDownload( '{{ download_zip_url }}', false )">
                            <label for="results_folder"> Include Results Folder</label><br>
                            <input type="checkbox" id="active_version" onclick="editZipDownload( '{{ download_zip_url }}', false )">
                            <label for="active_version"> Only Current Active Version</label><br>
                        </form>
                    </div>
                </details>
            {% endif %}
            {% if core.getUser().accessFullGrading() %}
                <a class="btn btn-default"
                   href="{{ bulk_stats_url }}"style="float: right">
                    Bulk Upload Forensics
                </a>
            {% endif %}
        {% endif %}
    </div> 
</div>
</body>

<script>
    let adminGradeableNavTab = 0;

    function onChangeNavTab(tab) {
        if (tab > 5 || tab < 0) {
            alert('Invalid Navigation');
            return;
        }

        // change the url so if the user refreshes the page, they stay on the same tab
        window.history.replaceState("", "", buildCourseUrl(['gradeable', '{{ gradeable_id }}', 'grading', 'status']) + `?nav_tab=${tab}`);
        adminGradeableNavTab = tab;

        //$('.page-content').hide();
        
        for (var i =0 ; i<6 ;i++) {
            $('#page_' + i + '_nav').removeClass('active-btn');
            $('#page_' + i + '_content').hide();
        }
        $('#page_' + tab + '_nav').addClass('active-btn');
        $('#page_' + tab + '_content').show();
    }

    $(document).ready(function() {
        // Disable any nav-bar buttons with no content
        $('.nav-bar').each(function () {
            if ($('#page_' + this.id.split('_')[1] + '_content').length == 0) {
                $('#page_' + this.id.split('_')[1] + '_nav').hide();
            }
            $(this).addClass("normal-btn");
        });

        // Click on tab 0
        onChangeNavTab(adminGradeableNavTab);
    });

    function editZipDownload(download_zip_url, limited) {
        var results = document.getElementById("results_folder");
        var active = document.getElementById("active_version");

        if (results.checked == true && active.checked == true){
            download_option = "both";
        }
        else if (results.checked == true) {
            download_option = "results";
        }
        else if (active.checked == true) {
            download_option = "active";
        }
        else {
            download_option = "all";
        }

        if (limited) {
            if (download_option == "all") {
                $("#zip_link_limited").attr("href", download_zip_url);
            }
            else {
                $("#zip_link_limited").attr("href", download_zip_url + "?type=limited_" + download_option);
            }
        }
        else {
            $("#zip_link_full").attr("href", download_zip_url + "?type=" + download_option);
        }
    }    

    function applyfilters() {
        location.reload();
    }

    function showStatusFilterForm() {
        $('.popup-form').css('display', 'none');
        var form = $("#edit-status-filter-form");
        form.css("display", "block");
        form.find('.form-body').scrollTop(0);
    }

</script>
{% include 'grading/electronic/ta_status/StatusFilterModal.twig' %}
