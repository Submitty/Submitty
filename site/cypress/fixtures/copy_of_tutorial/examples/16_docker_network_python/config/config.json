{
    // autograding_method must be docker in order for networking to work. If you forget it,
    // your assignment should fail to build.
    "autograding_method" : "docker",
    // By default, show students a list of the dispatcher actions taken for each testcase.
    "publish_actions" : true,
    "container_options" : {
      //States that a given testcase uses a router by default. (Default value is true)
      "use_router" : true
    },
    "resource_limits" : {
        "RLIMIT_NPROC" : 100,
        "RLIMIT_STACK" : 10000000,
        "RLIMIT_DATA"  : 2000000000
    },
    // Each testcase creates a new, unique set of docker containers and networks.
    "testcases" : [
        {
            // For this testcase, do not show students a list of dispatcher actions
            "publish_actions" : false,
            //Despite the default being true, this testcase will not use a router.
            "use_router" : false,
            "title" : "Simple Testcase, No Router",
            "containers" : [
                {
                    // Setting container_name allows you to later refer to the container by this handle
                    // (e.g. when specifying outgoing connections). By default containers are named
                    // container0, container1, container2, etc.
                    "container_name" : "alpha",
                    "commands" : ["python3 -u server.py"],
                    //outgoing_connections list the containers that this container is allowed to network to.
                    "outgoing_connections" : ["beta", "charlie"]
                    // You can specify a docker image here, and if it is built on submitty, this container
                    // will use it. If unset, this field defaults to ubuntu:custom  -- the default
                    // submitty image.
                    //container_image : <image_name>
                },
                {
                    "container_name" : "beta",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "charlie"]
                },
                {
                    "container_name" : "charlie",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "beta"]
                },
                {
                    "container_name" : "client",
                    // It can be important to ensure your container's start in the correct order.
                    // In this example, we want the server to start before the client, so we add a sleep command.
                    "commands" : ["python3 -u client.py"]
                    // By not specifying a outgoing_connections array, we allow ourselves to connect to all nodes on the network
                }
            ],
            "dispatcher_actions" : [
              {
                "action" : "delay",
                "seconds" : 3
              },
              {
                "containers" : ["client"],
                "action" : "stdin",
                "string" : "alpha-beta:charlie\n"
              },
              {
                "action" : "delay",
                "seconds" : 5
              },
              {
                "containers" : ["alpha", "beta", "charlie", "client"],
                "action" : "stop"
              }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "alpha/STDOUT.txt",
                    "expected_file" : "alpha_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "beta/STDOUT.txt",
                    "expected_file" : "beta_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "charlie/STDOUT.txt",
                    "expected_file" : "charlie_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "charlie/STDOUT.txt",
                    "expected_file" : "charlie_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                }
            ]
        },
        {
            //Despite the default being true, this testcase will not use a router.
            "use_router" : true,
            "title" : "Simple Testcase, With Router",
            "containers" : [
                {
                    // Setting container_name allows you to later refer to the container by this handle
                    // (e.g. when specifying outgoing connections). By default containers are named
                    // container0, container1, container2, etc.
                    "container_name" : "alpha",
                    "commands" : ["python3 -u server.py"],
                    //outgoing_connections list the containers that this container is allowed to network to.
                    "outgoing_connections" : ["beta", "charlie"]
                    // You can specify a docker image here, and if it is built on submitty, this container
                    // will use it. If unset, this field defaults to ubuntu:custom  -- the default
                    // submitty image.
                    //container_image : <image_name>
                },
                {
                    "container_name" : "beta",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "charlie"]
                },
                {
                    "container_name" : "charlie",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "beta"]
                },
                {
                    "container_name" : "client",
                    // It can be important to ensure your container's start in the correct order.
                    // In this example, we want the server to start before the client, so we add a sleep command.
                    "commands" : ["python3 -u client.py"]
                    // By not specifying a outgoing_connections array, we allow ourselves to connect to all nodes on the network
                }
            ],
            "dispatcher_actions" : [
              {
                "action" : "delay",
                "seconds" : 3
              },
              {
                "containers" : ["client"],
                "action" : "stdin",
                "string" : "alpha-beta:charlie\n"
              },
              {
                "action" : "delay",
                "seconds" : 5
              },
              {
                "containers" : ["alpha", "beta", "charlie", "client"],
                "action" : "stop"
              }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "alpha/STDOUT.txt",
                    "expected_file" : "alpha_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "beta/STDOUT.txt",
                    "expected_file" : "beta_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "charlie/STDOUT.txt",
                    "expected_file" : "charlie_simple.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                //Adding this "sequence_diagram" filecheck will display a sequence diagram
                // of messages passed to the student.
                {
                    "sequence_diagram" : true,
                    "method" : "errorIfEmpty",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "deduction" : 0.0
                }
            ]
        },
        {
            "use_router" : true,
            "title" : "Moderate Testcase, With Router",
            "containers" : [
                {
                    // Setting container_name allows you to later refer to the container by this handle
                    // (e.g. when specifying outgoing connections). By default containers are named
                    // container0, container1, container2, etc.
                    "container_name" : "alpha",
                    "commands" : ["python3 -u server.py"],
                    //outgoing_connections list the containers that this container is allowed to network to.
                    "outgoing_connections" : ["beta", "charlie"]
                    // You can specify a docker image here, and if it is built on submitty, this container
                    // will use it. If unset, this field defaults to ubuntu:custom  -- the default
                    // submitty image.
                    //container_image : <image_name>
                },
                {
                    "container_name" : "beta",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "charlie"]
                },
                {
                    "container_name" : "charlie",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "beta"]
                },
                {
                    "container_name" : "client",
                    // It can be important to ensure your container's start in the correct order.
                    // In this example, we want the server to start before the client, so we add a sleep command.
                    "commands" : ["python3 -u client.py"]
                    // By not specifying a outgoing_connections array, we allow ourselves to connect to all nodes on the network
                },
                {
                    "container_name" : "router",
                    "commands" : ["python3 -u custom_router.py"]
                }
            ],
            "dispatcher_actions" : [
              {
                "action" : "delay",
                "seconds" : 3
              },
              {
                "containers" : ["client"],
                "action" : "stdin",
                "string" : "alpha-beta:charlie:alpha:beta:charlie\n"
              },
              {
                "action" : "delay",
                "seconds" : 5
              },
              {
                "containers" : ["alpha", "beta", "charlie", "client"],
                "action" : "stop"
              }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "alpha/STDOUT.txt",
                    "expected_file" : "alpha_moderate.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "beta/STDOUT.txt",
                    "expected_file" : "beta_moderate.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "charlie/STDOUT.txt",
                    "expected_file" : "charlie_moderate.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "sequence_diagram" : true,
                    "method" : "errorIfEmpty",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "deduction" : 0.0
                }
            ]
        },
        {
            //Despite the default being true, this testcase will not use a router.
            "use_router" : true,
            "title" : "Large Testcase, With Router",
            "containers" : [
                {
                    "container_name" : "alpha",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["beta", "charlie", "delta"]
                },
                {
                    "container_name" : "beta",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "charlie", "delta"]
                },
                {
                    "container_name" : "charlie",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "beta", "delta"]
                },
                {
                    "container_name" : "delta",
                    "commands" : ["python3 -u server.py"],
                    "outgoing_connections" : ["alpha", "beta", "charlie"]
                },
                {
                    "container_name" : "client",
                    // It can be important to ensure your container's start in the correct order.
                    // In this example, we want the server to start before the client, so we add a sleep command.
                    "commands" : ["python3 -u client.py"]
                    // By not specifying a outgoing_connections array, we allow ourselves to connect to all nodes on the network
                }
            ],
            "dispatcher_actions" : [
              {
                "action" : "delay",
                "seconds" : 3
              },
              {
                "containers" : ["client"],
                "action" : "stdin",
                "string" : "beta-alpha:charlie:delta:beta:charlie:alpha:beta:delta:charlie:alpha\n"
              },
              {
                "action" : "delay",
                "seconds" : 5
              },
              {
                "containers" : ["alpha", "beta", "charlie", "delta", "client"],
                "action" : "stop"
              }
            ],
            "points" : 5,
            "validation": [
                {
                    "method" : "diff",
                    "actual_file" : "alpha/STDOUT.txt",
                    "expected_file" : "alpha_large.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "beta/STDOUT.txt",
                    "expected_file" : "beta_large.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "charlie/STDOUT.txt",
                    "expected_file" : "charlie_large.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "method" : "diff",
                    "actual_file" : "delta/STDOUT.txt",
                    "expected_file" : "delta_large.txt",
                    "failure_message" : "ERROR: Your code did not match the expected output.",
                    "show_message" : "on_failure",
                    "deduction" : 0.5
                },
                {
                    "sequence_diagram" : true,
                    "method" : "errorIfEmpty",
                    "title" : "Sequence Diagram Text File",
                    "actual_file" : "router/sequence_diagram.txt",
                    "deduction" : 0.0
                }
            ]
        }
    ]
}
