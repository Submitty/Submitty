<div class="notebook" id="notebook-main-view">
    <script>
        const USER_ID = "{{student_id}}";
    </script>

    {# Render content #}
    {% set num_codeboxes = 0 %}
    {% set num_multiple_choice = 0 %}
    {% set num_file_submissions = 0 %}
    {% set data_non_item_ref = 0 %}
    {% for cell in notebook %}
        <div id="content_{{ loop.index0 }}" class="{{ cell.type }}" {% if cell.item_ref is defined %}data-item-ref={{ cell.item_ref }}{% else %}data-non-item-ref={{data_non_item_ref}}{% set data_non_item_ref = data_non_item_ref + 1 %}{% endif %}>

            {# Handle if cell is markdown #}
            {% if cell.type == "markdown" %}

                {# Render markdown #}
                {% include "misc/Markdown.twig" with {
                    "content" : cell.markdown_data
                } only %}
                {{ _self.render_testcase_messages(cell, testcase_messages) }}

            {# Handle if cell is image #}
            {% elseif cell.type == "image" %}

                <img src="{{ attribute(image_data, cell.image) }}"

                {% if cell.width > 0 %}
                    width="{{ cell.width }}"
                {% endif %}

                {% if cell.height > 0 %}
                    height="{{ cell.height }}"
                {% endif %}

                {% if cell.alt_text is defined %}
                    alt="{{ cell.alt_text }}"
                {% endif %}

                >

                {{ _self.render_testcase_messages(cell, testcase_messages) }}

            {# Handle if cell is short_answer #}
            {% elseif cell.type == "short_answer" %}


                {% if cell.label %}
                    {% set content_label = cell.label %}
                {% else %}
                    {% set write_your = cell.programming_language != '' ? cell.programming_language : 'answer' %}
                    {% set content_label = "Write your " ~ write_your ~ " below:" %}
                {% endif %}

                {% include "misc/Markdown.twig" with {
                    "content" : content_label
                } only %}

                {{ _self.render_testcase_messages(cell, testcase_messages) }}
                {#disable input if viewing inactive version#}
                <div
                    id="codebox_{{ num_codeboxes }}"
                    name="codebox_{{ num_codeboxes }}"
                    autocapitalization="off"
                    spellcheck="false"
                    data-initial_value="{{ cell.initial_value }}"
                    data-recent_submission="{{ cell.recent_submission }}"
                    data-version_submission="{{ cell.version_submission }}"
                    onkeyup="handle_input_keypress();"
                    {% if viewing_inactive_version %}
                        style="pointer-events:none;"
                    {% endif %}
                >
                </div>
                <button type="button" id="codebox_{{ num_codeboxes }}_clear_button" class="btn btn-primary codebox-clear-reset"
                    data-older_version = "{{ viewing_inactive_version ? true : false }}">
                    {{ cell.initial_value == "" ? 'Clear' : 'Reset'}}
                </button>

                <button type="button" id="codebox_{{ num_codeboxes }}_recent_button" class="btn btn-primary codebox-clear-reset">Use Most Recent Submission</button>

                <script>
                    const config_{{ num_codeboxes }} = {};

                    var theme = localStorage.getItem("theme");
                    if(theme == null && window.matchMedia("(prefers-color-scheme: dark)").matches){
                        theme = "dark";
                    }
                    config_{{ num_codeboxes }}.theme = (theme == null || theme === "light") ? "eclipse" : "monokai";

                    {% if cell.programming_language is defined and cell.programming_language != '' %}
                      config_{{ num_codeboxes }}.lineNumbers = true;
                      config_{{ num_codeboxes }}.mode = '{{ cell.codemirror_mode }}';
                    {% endif %}

                    {% if cell.programming_language is defined %}
                      if('{{ cell.programming_language }}' === '' && {{ cell.rows }} > 0) {
                          config_{{ num_codeboxes }}.lineWrapping = true;
                      }
                    {% endif %}

                    if ({{ cell.rows }} > 0) {
                        var editor_{{ num_codeboxes }} = getLargeCodeMirror(document.getElementById("codebox_{{ num_codeboxes }}"), config_{{ num_codeboxes }});
                        editor_{{ num_codeboxes }}.setSize(null, rowsToPixels({{ cell.rows }}));
                    }
                    else {
                        var editor_{{ num_codeboxes }} = getSmallCodeMirror(document.getElementById("codebox_{{ num_codeboxes }}"), config_{{ num_codeboxes }});
                    }

                    {# Populate codebox and set state of buttons initially #}
                    {% if highest_version == 0 %}
                        setCodeBox("codebox_{{ num_codeboxes }}", "clear");
                        document.getElementById("codebox_{{ num_codeboxes }}_clear_button").disabled = true;
                        document.getElementById("codebox_{{ num_codeboxes }}_recent_button").style.visibility = 'hidden';
                    {% else %}
                        setCodeBox("codebox_{{ num_codeboxes }}", "recent");
                        document.getElementById("codebox_{{ num_codeboxes }}_clear_button").disabled = {{ viewing_inactive_version ? 'true' : 'false'}}
                        document.getElementById("codebox_{{ num_codeboxes }}_recent_button").disabled = true;
                    {% endif %}
                </script>
                {% set num_codeboxes = num_codeboxes + 1 %}

            {# Handle if cell is multiple choice #}
            {% elseif cell.type == "multiple_choice" %}
                {% if cell.randomize_order == true %}
                    {% set choices_indices = numberUtils.getRandomIndices(cell.choices|length, student_id, gradeable_id ) %}
                {% else %}
                    {% set choices_indices = cell.choices|keys %}
                {% endif %}

                <fieldset id="mc_field_{{ num_multiple_choice }}"
                          class="mc"
                          {% if cell.recent_submission is defined %}data-prev_checked="{{ cell.version_submission }}"{% endif %}>
                    {% if cell.allow_multiple == true %}
                        <legend>
                            {% if cell.label %}
                                {% include "misc/Markdown.twig" with {
                                    "content" : cell.label
                                } only %}
                            {% else %}
                                You may select many:
                            {% endif %}
                        </legend>

                        {{ _self.render_testcase_messages(cell, testcase_messages) }}

                        {% for idx in choices_indices %}
                            <label for="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}" class="markdown">
                                <input type="checkbox" class="key_to_click" tabindex="0"
                                       name="multiple_choice_{{ num_multiple_choice }}"
                                       id="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}"
                                       value="{{ cell.choices[idx].value }}"
                                       onclick="handle_input_keypress({{ viewing_inactive_version }});"
                                       {% if viewing_inactive_version %}
                                           disabled = "disabled"
                                       {% endif %}
                                />
                                {{ cell.choices[idx].description | markdown }}
                            </label>
                        {% endfor %}
                    {% else %}
                        <legend class="markdown">
                            {% if cell.label %}
                                {% include "misc/Markdown.twig" with {
                                    "content" : cell.label
                                } only %}
                            {% else %}
                                Select one:
                            {% endif %}
                        </legend>

                        {{ _self.render_testcase_messages(cell, testcase_messages) }}

                        {% for idx in choices_indices %}
                            <label for="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}">
                                <input type="radio" class="key_to_click" tabindex="0"
                                       name="multiple_choice_{{ num_multiple_choice }}"
                                       id="multiple_choice_{{ num_multiple_choice }}_{{ loop.index0 }}"
                                       value="{{ cell.choices[idx].value }}"
                                       onclick="handle_input_keypress({{ viewing_inactive_version }});"
                                />
                                {% include "misc/Markdown.twig" with {
                                    "content" : cell.choices[idx].description
                                } only %}
                            </label>
                        {% endfor %}
                    {% endif %}
                </fieldset>

                {# Create reset to recent submission button #}
                <button type="button" id="mc_{{ num_multiple_choice }}_clear_button" class="btn btn-primary mc-clear">Clear</button>
                <button type="button" id="mc_{{ num_multiple_choice }}_recent_button" class="btn btn-primary mc-recent">Use Most Recent Submission</button>
                <script>
                    $("multiple_choice_{{ num_multiple_choice }}_1").attr("disabled", true);
                    {# Populate checkboxes initially #}
                    {% if cell.recent_submission is defined %}
                        setMultipleChoices("mc_field_{{ num_multiple_choice }}", {{ viewing_inactive_version }});
                    {% endif %}

                    {# Configure initial state for the button #}
                    {% if highest_version == 0 %}
                        $("#mc_{{ num_multiple_choice }}_clear_button").attr("disabled", true);
                        $("#mc_{{ num_multiple_choice }}_recent_button").hide();
                    {% else %}
                        $("#mc_{{ num_multiple_choice }}_clear_button").attr("disabled", {{ viewing_inactive_version ? 'true' : 'false' }});
                        $("#mc_{{ num_multiple_choice }}_recent_button").attr("disabled", true);
                    {% endif %}
                </script>

                {% set num_multiple_choice = num_multiple_choice + 1 %}

            {% elseif cell.type == "file_submission" %}
                {% set num_file_submissions = num_file_submissions + 1 %}

                {% if is_grader_view | default(null) %}
                    {% if old_files is empty %}
                        <p>No files were submitted</p>
                    {% endif %}
                {% else %}
                    {{ _self.renderFileSubmission(max_file_uploads,num_file_submissions, old_files, cell.label, viewing_inactive_version) }}
                {% endif  %}
                {% if old_files is not empty %}
                    <p>Current submitted files:</p>
                    {% for file in old_files %}
                        {% set id = 'nd' ~ num_file_submissions ~ 'f' ~ loop.index %}
                        {% if file.part == num_file_submissions %}
                            <div>
                                <div class="file-viewer">
                                    <a class='openAllFilesubmissions openable-element-submissions key_to_click' file-url="{{ file.path|url_encode }}" onclick='openFrame({% if is_grader_view %}"{{ file.name|url_encode|e('js') }}", "{{ file.path|url_encode|e('js') }}", "{{ id }}", false{% else %}"{{ file.path|url_encode|e('js') }}", "{{ id }}", "{{ file.name|url_encode|e('js') }}", true{% endif %}); {% if is_grader_view %}updateCookies();{% endif %}'>
                                        <span class="fas fa-plus-circle" style='vertical-align:text-bottom;'></span>
                                        {{ file.name }}</a> &nbsp;
                                    <a id = 'open_file_{{ file.name|url_encode }}' onclick='popOutSubmittedFile("{{ file.name|url_encode }}", "{{ file.path|url_encode }}")' aria-label="Pop up the file in a new window" class="key_to_click" tabindex="0"><i class="fas fa-window-restore" title="Pop up the file in a new window"></i></a>
                                    {% if is_grader_view %}
                                    <a onclick='viewFileFullPanel("{{ file.name|url_encode|e('js') }}", "{{ file.path|url_encode|e('js') }}", 0, "notebook")' aria-label="Show file in full panel" class="key_to_click" tabindex="0"><i class="fas fa-share" title="Show file in full panel"></i></a>
                                    {% endif %}
                                    <a onclick='downloadFile("{{ file.path|url_encode }}", "submissions")' aria-label="Download the file" class="key_to_click" tabindex="0"><i class="fas fa-download" title="Download the file"></i></a>
                                </div>
                                <div id="file_viewer_{{ id }}" style="margin-left: -15px" data-file_name="{{ file.name }}" data-file_url="{{ file.path }}"></div>
                            </div>
                        {% endif %}
                    {% endfor %}
                {% endif %}
                <button type="button" class="btn btn-primary
                    sa-clear-reset" onclick="deleteFiles({{num_file_submissions}});"
                    {% if viewing_inactive_version %}
                        disabled = "disabled"
                    {% endif %}>
                    Clear
                </button>
                <button type="button" 
                    onclick="populatePreviousFiles({{num_file_submissions}});"
                    class="btn btn-primary mc-recent fs-recent">Use Most Recent Submission
                </button>
            {% endif %}

        </div>

    {% endfor %}



</div>

<script>
    function populatePreviousFiles(part){
        let prev_files = {
            {% for file in old_files %}
                {{file.part}} : {'name' : '{{file.name}}', 'size' : '{{file.size}}' },
            {% endfor %}
        };


        let tgt = prev_files[part];
        if (typeof tgt === "undefined"){
            return;
        }

        deleteFiles(part);
        addLabel(tgt['name'], tgt['size'], part);
        readPrevious(tgt['name'], part);
        setUsePrevious();
    }


    $(function(){

        {% if is_grader_view | default(null) %}
            //disable inputs if we're viewing from the grader's view
            let nb = document.getElementsByClassName("notebook")[0];
            let tgts = nb.querySelectorAll('input');
            for(let x of tgts){
                x.disabled = true;
            }

            tgts = nb.querySelectorAll('button');
            for(let x of tgts){
                x.disabled = true;
            }

            tgts = nb.querySelectorAll('textarea');
            for(let x of tgts){
                x.disabled = true;
            }

            tgts = nb.querySelectorAll('.CodeMirror');
            for(let x of tgts){
                x.CodeMirror.setOption("readOnly", true);
                x.CodeMirror.refresh();
            }

        {% endif %}

        createArray({{ num_file_submissions }});

        {% for file in old_files %}
            addLabel('{{ file.name }}', '{{ file.size }}', {{ file.part }}, true);
            readPrevious('{{ file.name }}', {{ file.part }});
        {% endfor %}
        setUsePrevious();

        {% if old_files | length == 0 %}
            let btns = document.getElementsByClassName("fs-recent");
            for (let btn of btns){
                btn.disabled = true;
            }
        {% endif %}
    });
</script>


{% macro render_testcase_messages(cell, testcase_messages) %}

    {# If testcase_ref is set then attempt to display associated messages #}
    {% if cell.testcase_ref is defined %}
        {% if testcase_messages[cell.testcase_ref] is defined %}
            {% for msg in testcase_messages[cell.testcase_ref] %}
                <p class="feedback-msg-{{ msg.type }}">{{ msg.message }}</p>
            {% endfor %}
        {% endif %}
    {% endif %}

{% endmacro %}

{# File submission for notebooks #}
{% macro renderFileSubmission(max_file_uploads, index, old_files, label, viewing_inactive_version) %}
    <div id="upload-boxes">
        {# uploadIndex and input-file + Index required for drag-and-drop.js #}
        <div tabindex="0"
             id="upload{{index}}"
             class="upload-box"
             onkeypress="clicked_on_box(event)"
             role="text"
             aria-label="Press enter to upload your part {{ index }} file"
        >
            <h2 class="label" id="label{{index}}">
                Drag your {{ label }} file(s) here or click to open file browser
            </h2>
            <input type="file" name="files" id="input-file{{index}}" 
                   class="hide" onchange="addFilesFromInput({{index}})"
                   multiple aria-label="Select Files to upload"
                    {% if viewing_inactive_version %}
                        disabled="disabled"
                    {% endif %}
            />
            <table class="file-upload-table" id="file-upload-table-{{index}}">
            <tr style="background:transparent; display:none;">
                <th>File Name:</th>
                <th>Size:</th>
            </tr>
            </table>
            <p>Maximum allowed number of files to be uploaded is {{ max_file_uploads }}.</p>
        </div>
    </div>

    <script>
        $(function(){
            //initialize the dropzone just created
            initMaxNoFiles({{max_file_uploads}});
            initializeDropZone("upload{{ index }}");
        });
    </script>
{% endmacro %}
