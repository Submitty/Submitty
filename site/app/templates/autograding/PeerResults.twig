{% import 'functions/Badge.twig' as Badge %}
{% import 'functions/TAResultsFunctions.twig' as TAResultsFunctions %}
{% import _self as self %}

<script>
{# When the user clicks on a peer tab in peer feedback mode, hide all other peer feedback panels, set all other tabs to unselected, set the clicked peer tab to selected and show the corresponding peer feedback panel #}

function open_peer_feedback_tab(user, ordered_graders) {
    $('.page-content').hide();
    $('#peer-feedback-'+user).show();
    for (var i = 0 ; i<{{ordered_graders|json_encode|raw}}.length;i++){
        $('#peer_feedback_nav_'+{{ordered_graders|json_encode|raw}}[i]).removeClass('active-btn');
    }
    $('#peer_feedback_nav_'+user).addClass('active-btn');
}
function set_peer_feedback(grader_id, user_id, g_id, feedback, send=true) {
    let peer_feedback_positive = ['no_response', 'thanks', 'helpful', 'detailed'];
    let peer_feedback_negative = ['inappropriate'];
    peer_feedback_positive.forEach(function(feedback, index) {
        $('#peer_feedback_'+ feedback +'_'+grader_id).removeClass("peer-feedback-positive-selected");
        $('#peer_feedback_'+ feedback +'_'+grader_id).addClass("peer-feedback-positive-unselected");
    })
    peer_feedback_negative.forEach(function(feedback, index) {
        $('#peer_feedback_'+ feedback +'_'+grader_id).removeClass("peer-feedback-negative-selected");
        $('#peer_feedback_'+ feedback +'_'+grader_id).addClass("peer-feedback-negative-unselected");
    })
    if(peer_feedback_positive.indexOf(feedback) !== -1){
        $('#peer_feedback_'+ feedback +'_'+grader_id).removeClass("peer-feedback-positive-unselected");
        $('#peer_feedback_'+ feedback +'_'+grader_id).addClass("peer-feedback-positive-selected");
    }
    else{
        $('#peer_feedback_'+ feedback +'_'+grader_id).removeClass("peer-feedback-negative-unselected");
        $('#peer_feedback_'+ feedback +'_'+grader_id).addClass("peer-feedback-negative-selected");
    }
    if (send) {
        peerFeedbackUpload(grader_id, user_id, g_id, feedback);
    }
}
function switch_feedback_modes() {
    if($('#switch_feedback_button')[0].textContent == "Switch to Feedback Mode"){
        $('#switch_feedback_button')[0].textContent = "Switch to Normal Display";
        $('#peer_feedback_wrapper').show();
        $('#comments_wrapper').hide();
        $('#normal_peer_wrapper').hide();
    }
    else{
        $('#switch_feedback_button')[0].textContent = "Switch to Feedback Mode";
        $('#normal_peer_wrapper').show();
        $('#comments_wrapper').show();
        $('#peer_feedback_wrapper').hide();
    }
}
</script>

{% if not been_ta_graded %}
    <br>
    <h3>This assignment has not been graded yet</h3>
{% elseif not active_same_as_graded %}
    <br>
    <h3>The version you have selected to be graded above does not match the version graded by your TA/instructor, please contact TA/instructor if necessary to resolve the problem.</h3>
{% elseif not grading_complete %}
    <br>
    <h3>Grading not complete, please contact an instructor/grader</h3>
{% else %}
    <div class="sub">

        <button class = 'btn btn-default' id = "switch_feedback_button" onclick='switch_feedback_modes()'>Switch to Feedback Mode</button>

        {# /Overview #}

        {% if (peer_score >= peer_max) %}
            <canvas id="confetti_canvas"></canvas>
        {% endif %}

        {% if peer_components | length > 0 %}
            <div class="no-border-box submission-page-total-header">
                <div class="box-title-total"
                    {% if peer_score >= peer_max %}
                        onclick="addConfetti();" style="cursor:pointer;"
                    {% endif %}>
                    {{ Badge.render(peer_score, peer_max, false) }}
                    <h4>Peer Grading Total</h4>
                </div>
            </div>

            {# Peer Component boxes #}
            <div id="normal_peer_wrapper">
                {% for component in peer_components %}
                    {% if component.peer_ids | length <= 5 %}
                        {{ self.renderFewPeerResults(component, peer_aliases, ordered_graders)  }}
                    {% else %}
                        {{ self.renderManyPeerResults(component) }}
                    {% endif %}
                {% endfor %}
            </div>
            {{ self.renderPeerFeedbackTable(peer_components, peer_aliases, ordered_graders, grader_info, uploaded_pdfs, annotated_file_names, student_pdf_view_url, user_id, gradeable_id, peer_feedback, anon_grader_id_mapping, num_decimals)  }}
            {# /Peer Component boxes #}
        {% endif %}

        {# Overview #}
        <div id="comments_wrapper" class="no-border-box" style="padding: 10px; word-break: break-word;">
            {% for user in ordered_graders | filter(user => grader_info[user] is defined) | sort %}
                <div class="overall-comment-box">
                    <p class="overall-comment-author">
                        Overall note from {{peer_aliases[user]}}:
                    </p>
                    {% if grader_info[user].comment is not empty %}
                    <p class="overall-comment">
                        <span class='gradeable_comment'>{{ grader_info[user].comment | nl2br }}</span>
                    </p>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {# /Total auto + manual #}
    </div>
{% endif %}


{%- macro renderManyPeerResults(component, num_decimals) -%}
    <div class="box grade-results">
        <div class="no-border-box-badge">
            {{ Badge.render(component.total_score, component.points_possible, component.extra_credit) }}
        </div>
        <div class="no-border-box-info" style="width:100%">
            <h4>
                {{ component.title|escape }}
            </h4>
            <div style="float:left; width:100%;">
                <p style="padding-bottom: 10px;">
                    {{ component.student_comment|nl2br }}
                </p>
                <p>

                {# This is a layout table #}
                <table class="mobile-table" style="border-color:white;">
                     <thead>
                        <tr>
                            <th class="peer-table-header" style="width:90px;"># of Peers</th>
                            <th class="peer-table-header"> Points </th>
                            <th class="peer-table-title-data"> Title  </th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for mark in component.marks|filter((mark) => mark.show_mark) %}
                            <tr>
                                <td class="peer-table-data">
                                    {{ mark.num_earned }}
                                </td>
                                <td class="peer-table-data">
                                    {{ mark.points|number_format(num_decimals) }}
                                </td>
                                <td class="peer-table-title-data">
                                    {{ mark.title|nl2br }}
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
                </p>
            </div>
        </div>
    </div>
{%- endmacro -%}


{%- macro renderFewPeerResults(component, peer_aliases, ordered_graders, num_decimals) -%}
    <div class="box grade-results">
        <div class="no-border-box-badge">
            {{ Badge.render(component.total_score, component.points_possible, component.extra_credit) }}
        </div>
        <div class="no-border-box-info" style="width:100%">
            <h4>
                {{ component.title|escape }}
            </h4>
            <div style="float:left; width:100%;">
                <p style="padding-bottom: 10px;">{{ component.student_comment|nl2br }}</p>
                <p>

                {# This is a layout table #}
                <table class="mobile-table" style="border-color:white;">
                     <thead>
                        <tr>
                            {% for grader in ordered_graders|filter(grader => grader in component.peer_ids) %}
                                <th class="peer-table-header">
                                    {{ peer_aliases[grader] }}
                                </th>
                            {% endfor %}
                            <th> Points </th>
                            <th class="peer-table-title-data"> Title  </th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for mark in component.marks|filter((mark) => mark.show_mark) %}
                            <tr>
                                {% for grader in ordered_graders|filter(grader => grader in component.peer_ids) %}
                                    <td class="peer-table-data">
                                        {% if mark.earned[grader] %}
                                            <div class="col-no-gutters indicator">
                                                <i class="far fa-check-square fa-1g"></i>
                                            </div>
                                        {% else %}
                                            <div class="col-no-gutters indicator">
                                                <i class="far fa-square fa-1g"></i>
                                            </div>
                                        {% endif %}
                                    </td>
                                {% endfor %}
                                <td class="peer-table-data">
                                    {{ mark.points|number_format(num_decimals) }}
                                </td>
                                <td class="peer-table-title-data">
                                    {{ mark.title|nl2br }}
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
                </p>
            </div>
        </div>
    </div>
{%- endmacro -%}

{%- macro renderPeerFeedbackTable(peer_components, peer_aliases, ordered_graders, grader_info, uploaded_pdfs, annotated_file_names, student_pdf_view_url, user_id, gradeable_id, peer_feedback, anon_grader_id_mapping, num_decimals) -%}
    <div id="peer_feedback_wrapper" style="display: none;">
        <div class="box grade-results">
            {% for grader in ordered_graders %}
                <a class="nav-bar key_to_click" id="peer_feedback_nav_{{grader}}" onclick="open_peer_feedback_tab('{{grader}}');">{{peer_aliases[grader]}}</a>
            {% endfor %}
        </div>
        <span style="float: right" id="save_status"></span>
        {% for grader in ordered_graders %}
            <div class="page-content" id="peer-feedback-{{grader}}" style="display: none;">
                <table class="mobile-table" id="peer-feedback-table-{{grader}}">
                    <tbody>
                        {% for component in peer_components %}
                            <div class="box-info">
                                    <h4>{{ component.title|escape }}
                                    </h4>
                                    <p>
                                        {% for mark in component.marks %}
                                            {% if mark.earned[anon_grader_id_mapping[grader]] %}
                                                <i class="far fa-check-square fa-1g"></i>
                                            {% else %}
                                                <i class="far fa-square fa-1g"></i>
                                            {% endif %}
                                            {{ mark.points|number_format(num_decimals) }}
                                            {{ mark.title|nl2br }}
                                            </br>
                                        {% endfor %}
                                    </p>
                            </div>
                        {% endfor %}
                    </tbody>
                </table>
                {% if grader_info[anon_grader_id_mapping[grader]] is defined %}
                    <div class="overall-comment-box">
                        <p class="overall-comment-author">
                            Overall note from grader:
                        </p>
                        {% if grader_info[anon_grader_id_mapping[grader]].comment is not empty %}
                        <p class="overall-comment">
                            <span class='gradeable_comment'>{{ grader_info[anon_grader_id_mapping[grader]].comment | nl2br }}</span>
                        </p>
                        {% endif %}
                    </div>
                {% endif %}

            {% for file in uploaded_pdfs %}
                {% if file.encoded_name is defined and file.encoded_name in annotated_file_names and grader in file.graders%}
                    </br>
                    <p>
                        {{file.name}} :
                    </p>
                    <p>
                        <a class="btn btn-success" onclick="openUrl('{{ student_pdf_view_url }}?filename={{ file.name }}&path={{ file.path|url_encode }}&grader={{ grader|url_encode }}')">View Popup <i class="fas fa-window-restore"></i>
                        </a>
                    </p>
                {% endif %}

            {% endfor %}
            </br>
            <b>Peer Feedback:</b>
            <div>
                </br>
                <a class="btn peer-feedback-positive-unselected" data-color="#008000" id="peer_feedback_no_response_{{grader}}" onclick="set_peer_feedback('{{grader}}', '{{user_id}}', '{{gradeable_id}}','no_response', '>No Response');">No Response</a>
                <a class="btn peer-feedback-positive-unselected" data-color="#008000" id="peer_feedback_thanks_{{grader}}" onclick="set_peer_feedback('{{grader}}', '{{user_id}}', '{{gradeable_id}}', 'thanks', 'Thank You!');">Thank You</a>
                <a class="btn peer-feedback-positive-unselected" data-color="#008000" id="peer_feedback_helpful_{{grader}}" onclick="set_peer_feedback('{{grader}}', '{{user_id}}', '{{gradeable_id}}','helpful', 'This feedback was helpful to me');">This feedback was helpful to me!</a>
                <a class="btn peer-feedback-positive-unselected" data-color="#008000" id="peer_feedback_detailed_{{grader}}" onclick="set_peer_feedback('{{grader}}', '{{user_id}}', '{{gradeable_id}}', 'detailed', 'This feedback was detailed, specific, and/or technical');">This feedback was detailed, specific, and/or technical</a>
                <a class="btn peer-feedback-negative-unselected" data-color="#800000" id="peer_feedback_inappropriate_{{grader}}" onclick="set_peer_feedback('{{grader}}', '{{user_id}}', '{{gradeable_id}}', 'inappropriate', 'This feedback was inaccurate and/or inappropriate');">This feedback was inaccurate and/or inappropriate</a>
            </div>
            <script>
                var feedbackArray = {{peer_feedback|json_encode|raw}};
                if('{{grader}}' in feedbackArray){
                    var feedback = feedbackArray['{{grader}}']['{{user_id}}']['feedback'];
                    set_peer_feedback('{{grader}}', '{{user_id}}', '{{gradeable_id}}', feedback, false)
                }
            </script>
        </div>
        {% endfor %}
    </div>
{%- endmacro -%}
